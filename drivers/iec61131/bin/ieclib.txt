****** Generated with : gcc -E iec_std_lib.h


# 1 "iec_std_lib.h"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "iec_std_lib.h"
# 29 "iec_std_lib.h"
# 1 "/usr/llvm-gcc-4.2/bin/../lib/gcc/i686-apple-darwin11/4.2.1/include/limits.h" 1 3 4






# 1 "/usr/llvm-gcc-4.2/bin/../lib/gcc/i686-apple-darwin11/4.2.1/include/syslimits.h" 1 3 4
# 8 "/usr/llvm-gcc-4.2/bin/../lib/gcc/i686-apple-darwin11/4.2.1/include/limits.h" 2 3 4







# 1 "/Applications/Xcode.app/Contents/Developer/usr/llvm-gcc-4.2/lib/gcc/i686-apple-darwin11/4.2.1/include/limits.h" 1 3 4






# 1 "/Applications/Xcode.app/Contents/Developer/usr/llvm-gcc-4.2/lib/gcc/i686-apple-darwin11/4.2.1/include/syslimits.h" 1 3 4
# 8 "/Applications/Xcode.app/Contents/Developer/usr/llvm-gcc-4.2/lib/gcc/i686-apple-darwin11/4.2.1/include/limits.h" 2 3 4







# 1 "/usr/include/limits.h" 1 3 4
# 63 "/usr/include/limits.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 417 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/sys/_symbol_aliasing.h" 1 3 4
# 418 "/usr/include/sys/cdefs.h" 2 3 4
# 494 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/sys/_posix_availability.h" 1 3 4
# 495 "/usr/include/sys/cdefs.h" 2 3 4
# 64 "/usr/include/limits.h" 2 3 4
# 1 "/usr/include/machine/limits.h" 1 3 4





# 1 "/usr/include/i386/limits.h" 1 3 4
# 40 "/usr/include/i386/limits.h" 3 4
# 1 "/usr/include/i386/_limits.h" 1 3 4
# 41 "/usr/include/i386/limits.h" 2 3 4
# 7 "/usr/include/machine/limits.h" 2 3 4
# 65 "/usr/include/limits.h" 2 3 4
# 1 "/usr/include/sys/syslimits.h" 1 3 4
# 66 "/usr/include/limits.h" 2 3 4
# 16 "/Applications/Xcode.app/Contents/Developer/usr/llvm-gcc-4.2/lib/gcc/i686-apple-darwin11/4.2.1/include/limits.h" 2 3 4
# 16 "/usr/llvm-gcc-4.2/bin/../lib/gcc/i686-apple-darwin11/4.2.1/include/limits.h" 2 3 4
# 30 "iec_std_lib.h" 2
# 1 "/usr/llvm-gcc-4.2/bin/../lib/gcc/i686-apple-darwin11/4.2.1/include/float.h" 1 3 4
# 31 "iec_std_lib.h" 2
# 1 "/usr/include/math.h" 1 3 4
# 28 "/usr/include/math.h" 3 4
# 1 "/usr/include/architecture/i386/math.h" 1 3 4
# 49 "/usr/include/architecture/i386/math.h" 3 4
 typedef float float_t;
 typedef double double_t;
# 108 "/usr/include/architecture/i386/math.h" 3 4
extern int __math_errhandling ( void );
# 128 "/usr/include/architecture/i386/math.h" 3 4
extern int __fpclassifyf(float );
extern int __fpclassifyd(double );
extern int __fpclassify (long double);
# 163 "/usr/include/architecture/i386/math.h" 3 4
 static __inline__ int __inline_isfinitef (float ) __attribute__ ((always_inline));
 static __inline__ int __inline_isfinited (double ) __attribute__ ((always_inline));
 static __inline__ int __inline_isfinite (long double) __attribute__ ((always_inline));
 static __inline__ int __inline_isinff (float ) __attribute__ ((always_inline));
 static __inline__ int __inline_isinfd (double ) __attribute__ ((always_inline));
 static __inline__ int __inline_isinf (long double) __attribute__ ((always_inline));
 static __inline__ int __inline_isnanf (float ) __attribute__ ((always_inline));
 static __inline__ int __inline_isnand (double ) __attribute__ ((always_inline));
 static __inline__ int __inline_isnan (long double) __attribute__ ((always_inline));
 static __inline__ int __inline_isnormalf (float ) __attribute__ ((always_inline));
 static __inline__ int __inline_isnormald (double ) __attribute__ ((always_inline));
 static __inline__ int __inline_isnormal (long double) __attribute__ ((always_inline));
 static __inline__ int __inline_signbitf (float ) __attribute__ ((always_inline));
 static __inline__ int __inline_signbitd (double ) __attribute__ ((always_inline));
 static __inline__ int __inline_signbit (long double) __attribute__ ((always_inline));

 static __inline__ int __inline_isinff( float __x ) { return __builtin_fabsf(__x) == __builtin_inff(); }
 static __inline__ int __inline_isinfd( double __x ) { return __builtin_fabs(__x) == __builtin_inf(); }
 static __inline__ int __inline_isinf( long double __x ) { return __builtin_fabsl(__x) == __builtin_infl(); }
 static __inline__ int __inline_isfinitef( float __x ) { return __x == __x && __builtin_fabsf(__x) != __builtin_inff(); }
 static __inline__ int __inline_isfinited( double __x ) { return __x == __x && __builtin_fabs(__x) != __builtin_inf(); }
 static __inline__ int __inline_isfinite( long double __x ) { return __x == __x && __builtin_fabsl(__x) != __builtin_infl(); }
 static __inline__ int __inline_isnanf( float __x ) { return __x != __x; }
 static __inline__ int __inline_isnand( double __x ) { return __x != __x; }
 static __inline__ int __inline_isnan( long double __x ) { return __x != __x; }
 static __inline__ int __inline_signbitf( float __x ) { union{ float __f; unsigned int __u; }__u; __u.__f = __x; return (int)(__u.__u >> 31); }
 static __inline__ int __inline_signbitd( double __x ) { union{ double __f; unsigned int __u[2]; }__u; __u.__f = __x; return (int)(__u.__u[1] >> 31); }
 static __inline__ int __inline_signbit( long double __x ){ union{ long double __ld; struct{ unsigned int __m[2]; short __sexp; }__p; }__u; __u.__ld = __x; return (int) (((unsigned short) __u.__p.__sexp) >> 15); }
 static __inline__ int __inline_isnormalf( float __x ) { float fabsf = __builtin_fabsf(__x); if( __x != __x ) return 0; return fabsf < __builtin_inff() && fabsf >= 1.17549435e-38F; }
 static __inline__ int __inline_isnormald( double __x ) { double fabsf = __builtin_fabs(__x); if( __x != __x ) return 0; return fabsf < __builtin_inf() && fabsf >= 2.2250738585072014e-308; }
 static __inline__ int __inline_isnormal( long double __x ) { long double fabsf = __builtin_fabsl(__x); if( __x != __x ) return 0; return fabsf < __builtin_infl() && fabsf >= 3.36210314311209350626e-4932L; }
# 253 "/usr/include/architecture/i386/math.h" 3 4
extern double acos( double );
extern float acosf( float );

extern double asin( double );
extern float asinf( float );

extern double atan( double );
extern float atanf( float );

extern double atan2( double, double );
extern float atan2f( float, float );

extern double cos( double );
extern float cosf( float );

extern double sin( double );
extern float sinf( float );

extern double tan( double );
extern float tanf( float );

extern double acosh( double );
extern float acoshf( float );

extern double asinh( double );
extern float asinhf( float );

extern double atanh( double );
extern float atanhf( float );

extern double cosh( double );
extern float coshf( float );

extern double sinh( double );
extern float sinhf( float );

extern double tanh( double );
extern float tanhf( float );

extern double exp ( double );
extern float expf ( float );

extern double exp2 ( double );
extern float exp2f ( float );

extern double expm1 ( double );
extern float expm1f ( float );

extern double log ( double );
extern float logf ( float );

extern double log10 ( double );
extern float log10f ( float );

extern double log2 ( double );
extern float log2f ( float );

extern double log1p ( double );
extern float log1pf ( float );

extern double logb ( double );
extern float logbf ( float );

extern double modf ( double, double * );
extern float modff ( float, float * );

extern double ldexp ( double, int );
extern float ldexpf ( float, int );

extern double frexp ( double, int * );
extern float frexpf ( float, int * );

extern int ilogb ( double );
extern int ilogbf ( float );

extern double scalbn ( double, int );
extern float scalbnf ( float, int );

extern double scalbln ( double, long int );
extern float scalblnf ( float, long int );

extern double fabs( double );
extern float fabsf( float );

extern double cbrt( double );
extern float cbrtf( float );

extern double hypot ( double, double );
extern float hypotf ( float, float );

extern double pow ( double, double );
extern float powf ( float, float );

extern double sqrt( double );
extern float sqrtf( float );

extern double erf( double );
extern float erff( float );

extern double erfc( double );
extern float erfcf( float );






extern double lgamma( double );
extern float lgammaf( float );

extern double tgamma( double );
extern float tgammaf( float );

extern double ceil ( double );
extern float ceilf ( float );

extern double floor ( double );
extern float floorf ( float );

extern double nearbyint ( double );
extern float nearbyintf ( float );

extern double rint ( double );
extern float rintf ( float );

extern long int lrint ( double );
extern long int lrintf ( float );

extern double round ( double );
extern float roundf ( float );

extern long int lround ( double );
extern long int lroundf ( float );



    extern long long int llrint ( double );
    extern long long int llrintf ( float );
    extern long long int llround ( double );
    extern long long int llroundf ( float );


extern double trunc ( double );
extern float truncf ( float );

extern double fmod ( double, double );
extern float fmodf ( float, float );

extern double remainder ( double, double );
extern float remainderf ( float, float );

extern double remquo ( double, double, int * );
extern float remquof ( float, float, int * );

extern double copysign ( double, double );
extern float copysignf ( float, float );

extern double nan( const char * );
extern float nanf( const char * );

extern double nextafter ( double, double );
extern float nextafterf ( float, float );

extern double fdim ( double, double );
extern float fdimf ( float, float );

extern double fmax ( double, double );
extern float fmaxf ( float, float );

extern double fmin ( double, double );
extern float fminf ( float, float );

extern double fma ( double, double, double );
extern float fmaf ( float, float, float );

extern long double acosl(long double);
extern long double asinl(long double);
extern long double atanl(long double);
extern long double atan2l(long double, long double);
extern long double cosl(long double);
extern long double sinl(long double);
extern long double tanl(long double);
extern long double acoshl(long double);
extern long double asinhl(long double);
extern long double atanhl(long double);
extern long double coshl(long double);
extern long double sinhl(long double);
extern long double tanhl(long double);
extern long double expl(long double);
extern long double exp2l(long double);
extern long double expm1l(long double);
extern long double logl(long double);
extern long double log10l(long double);
extern long double log2l(long double);
extern long double log1pl(long double);
extern long double logbl(long double);
extern long double modfl(long double, long double *);
extern long double ldexpl(long double, int);
extern long double frexpl(long double, int *);
extern int ilogbl(long double);
extern long double scalbnl(long double, int);
extern long double scalblnl(long double, long int);
extern long double fabsl(long double);
extern long double cbrtl(long double);
extern long double hypotl(long double, long double);
extern long double powl(long double, long double);
extern long double sqrtl(long double);
extern long double erfl(long double);
extern long double erfcl(long double);






extern long double lgammal(long double);

extern long double tgammal(long double);
extern long double ceill(long double);
extern long double floorl(long double);
extern long double nearbyintl(long double);
extern long double rintl(long double);
extern long int lrintl(long double);
extern long double roundl(long double);
extern long int lroundl(long double);



    extern long long int llrintl(long double);
    extern long long int llroundl(long double);


extern long double truncl(long double);
extern long double fmodl(long double, long double);
extern long double remainderl(long double, long double);
extern long double remquol(long double, long double, int *);
extern long double copysignl(long double, long double);
extern long double nanl(const char *);
extern long double nextafterl(long double, long double);
extern double nexttoward(double, long double);
extern float nexttowardf(float, long double);
extern long double nexttowardl(long double, long double);
extern long double fdiml(long double, long double);
extern long double fmaxl(long double, long double);
extern long double fminl(long double, long double);
extern long double fmal(long double, long double, long double);
# 507 "/usr/include/architecture/i386/math.h" 3 4
extern double __inf( void );
extern float __inff( void );
extern long double __infl( void );
extern float __nan( void );


extern double j0 ( double );

extern double j1 ( double );

extern double jn ( int, double );

extern double y0 ( double );

extern double y1 ( double );

extern double yn ( int, double );

extern double scalb ( double, double );
# 543 "/usr/include/architecture/i386/math.h" 3 4
extern int signgam;
# 558 "/usr/include/architecture/i386/math.h" 3 4
extern long int rinttol ( double );


extern long int roundtol ( double );
# 570 "/usr/include/architecture/i386/math.h" 3 4
struct exception {
 int type;
 char *name;
 double arg1;
 double arg2;
 double retval;
};
# 601 "/usr/include/architecture/i386/math.h" 3 4
extern int finite ( double );


extern double gamma ( double );




extern int matherr ( struct exception * );





extern double significand ( double );






extern double drem ( double, double );
# 29 "/usr/include/math.h" 2 3 4
# 32 "iec_std_lib.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 66 "/usr/include/time.h" 3 4
# 1 "/usr/include/_types.h" 1 3 4
# 27 "/usr/include/_types.h" 3 4
# 1 "/usr/include/sys/_types.h" 1 3 4
# 33 "/usr/include/sys/_types.h" 3 4
# 1 "/usr/include/machine/_types.h" 1 3 4
# 32 "/usr/include/machine/_types.h" 3 4
# 1 "/usr/include/i386/_types.h" 1 3 4
# 37 "/usr/include/i386/_types.h" 3 4
typedef signed char __int8_t;



typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long long __int64_t;
typedef unsigned long long __uint64_t;

typedef long __darwin_intptr_t;
typedef unsigned int __darwin_natural_t;
# 70 "/usr/include/i386/_types.h" 3 4
typedef int __darwin_ct_rune_t;





typedef union {
 char __mbstate8[128];
 long long _mbstateL;
} __mbstate_t;

typedef __mbstate_t __darwin_mbstate_t;


typedef long int __darwin_ptrdiff_t;





typedef long unsigned int __darwin_size_t;





typedef __builtin_va_list __darwin_va_list;





typedef int __darwin_wchar_t;




typedef __darwin_wchar_t __darwin_rune_t;


typedef int __darwin_wint_t;




typedef unsigned long __darwin_clock_t;
typedef __uint32_t __darwin_socklen_t;
typedef long __darwin_ssize_t;
typedef long __darwin_time_t;
# 33 "/usr/include/machine/_types.h" 2 3 4
# 34 "/usr/include/sys/_types.h" 2 3 4
# 58 "/usr/include/sys/_types.h" 3 4
struct __darwin_pthread_handler_rec
{
 void (*__routine)(void *);
 void *__arg;
 struct __darwin_pthread_handler_rec *__next;
};
struct _opaque_pthread_attr_t { long __sig; char __opaque[56]; };
struct _opaque_pthread_cond_t { long __sig; char __opaque[40]; };
struct _opaque_pthread_condattr_t { long __sig; char __opaque[8]; };
struct _opaque_pthread_mutex_t { long __sig; char __opaque[56]; };
struct _opaque_pthread_mutexattr_t { long __sig; char __opaque[8]; };
struct _opaque_pthread_once_t { long __sig; char __opaque[8]; };
struct _opaque_pthread_rwlock_t { long __sig; char __opaque[192]; };
struct _opaque_pthread_rwlockattr_t { long __sig; char __opaque[16]; };
struct _opaque_pthread_t { long __sig; struct __darwin_pthread_handler_rec *__cleanup_stack; char __opaque[1168]; };
# 94 "/usr/include/sys/_types.h" 3 4
typedef __int64_t __darwin_blkcnt_t;
typedef __int32_t __darwin_blksize_t;
typedef __int32_t __darwin_dev_t;
typedef unsigned int __darwin_fsblkcnt_t;
typedef unsigned int __darwin_fsfilcnt_t;
typedef __uint32_t __darwin_gid_t;
typedef __uint32_t __darwin_id_t;
typedef __uint64_t __darwin_ino64_t;

typedef __darwin_ino64_t __darwin_ino_t;



typedef __darwin_natural_t __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
typedef __uint16_t __darwin_mode_t;
typedef __int64_t __darwin_off_t;
typedef __int32_t __darwin_pid_t;
typedef struct _opaque_pthread_attr_t
   __darwin_pthread_attr_t;
typedef struct _opaque_pthread_cond_t
   __darwin_pthread_cond_t;
typedef struct _opaque_pthread_condattr_t
   __darwin_pthread_condattr_t;
typedef unsigned long __darwin_pthread_key_t;
typedef struct _opaque_pthread_mutex_t
   __darwin_pthread_mutex_t;
typedef struct _opaque_pthread_mutexattr_t
   __darwin_pthread_mutexattr_t;
typedef struct _opaque_pthread_once_t
   __darwin_pthread_once_t;
typedef struct _opaque_pthread_rwlock_t
   __darwin_pthread_rwlock_t;
typedef struct _opaque_pthread_rwlockattr_t
   __darwin_pthread_rwlockattr_t;
typedef struct _opaque_pthread_t
   *__darwin_pthread_t;
typedef __uint32_t __darwin_sigset_t;
typedef __int32_t __darwin_suseconds_t;
typedef __uint32_t __darwin_uid_t;
typedef __uint32_t __darwin_useconds_t;
typedef unsigned char __darwin_uuid_t[16];
typedef char __darwin_uuid_string_t[37];
# 28 "/usr/include/_types.h" 2 3 4
# 39 "/usr/include/_types.h" 3 4
typedef int __darwin_nl_item;
typedef int __darwin_wctrans_t;

typedef __uint32_t __darwin_wctype_t;
# 67 "/usr/include/time.h" 2 3 4


# 1 "/usr/include/_structs.h" 1 3 4
# 24 "/usr/include/_structs.h" 3 4
# 1 "/usr/include/sys/_structs.h" 1 3 4
# 88 "/usr/include/sys/_structs.h" 3 4
struct timespec
{
 __darwin_time_t tv_sec;
 long tv_nsec;
};
# 25 "/usr/include/_structs.h" 2 3 4
# 70 "/usr/include/time.h" 2 3 4







typedef __darwin_clock_t clock_t;




typedef __darwin_size_t size_t;




typedef __darwin_time_t time_t;


struct tm {
 int tm_sec;
 int tm_min;
 int tm_hour;
 int tm_mday;
 int tm_mon;
 int tm_year;
 int tm_wday;
 int tm_yday;
 int tm_isdst;
 long tm_gmtoff;
 char *tm_zone;
};
# 113 "/usr/include/time.h" 3 4
extern char *tzname[];


extern int getdate_err;

extern long timezone __asm("_" "timezone" );

extern int daylight;


char *asctime(const struct tm *);
clock_t clock(void) __asm("_" "clock" );
char *ctime(const time_t *);
double difftime(time_t, time_t);
struct tm *getdate(const char *);
struct tm *gmtime(const time_t *);
struct tm *localtime(const time_t *);
time_t mktime(struct tm *) __asm("_" "mktime" );
size_t strftime(char * , size_t, const char * , const struct tm * ) __asm("_" "strftime" );
char *strptime(const char * , const char * , struct tm * ) __asm("_" "strptime" );
time_t time(time_t *);


void tzset(void);



char *asctime_r(const struct tm * , char * );
char *ctime_r(const time_t *, char *);
struct tm *gmtime_r(const time_t * , struct tm * );
struct tm *localtime_r(const time_t * , struct tm * );


time_t posix2time(time_t);



void tzsetwall(void);
time_t time2posix(time_t);
time_t timelocal(struct tm * const);
time_t timegm(struct tm * const);



int nanosleep(const struct timespec *, struct timespec *) __asm("_" "nanosleep" );


# 33 "iec_std_lib.h" 2
# 1 "/usr/include/stdint.h" 1 3 4
# 20 "/usr/include/stdint.h" 3 4
typedef signed char int8_t;




typedef short int16_t;




typedef int int32_t;




typedef long long int64_t;




typedef unsigned char uint8_t;




typedef unsigned short uint16_t;




typedef unsigned int uint32_t;




typedef unsigned long long uint64_t;



typedef int8_t int_least8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;
typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;



typedef int8_t int_fast8_t;
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;
typedef uint8_t uint_fast8_t;
typedef uint16_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;






typedef long intptr_t;




typedef unsigned long uintptr_t;







typedef long int intmax_t;
# 106 "/usr/include/stdint.h" 3 4
typedef long unsigned int uintmax_t;
# 34 "iec_std_lib.h" 2

# 1 "/usr/include/stdio.h" 1 3 4
# 65 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/Availability.h" 1 3 4
# 141 "/usr/include/Availability.h" 3 4
# 1 "/usr/include/AvailabilityInternal.h" 1 3 4
# 142 "/usr/include/Availability.h" 2 3 4
# 66 "/usr/include/stdio.h" 2 3 4







typedef __darwin_va_list va_list;
# 85 "/usr/include/stdio.h" 3 4
typedef __darwin_off_t fpos_t;
# 96 "/usr/include/stdio.h" 3 4
struct __sbuf {
 unsigned char *_base;
 int _size;
};


struct __sFILEX;
# 130 "/usr/include/stdio.h" 3 4
typedef struct __sFILE {
 unsigned char *_p;
 int _r;
 int _w;
 short _flags;
 short _file;
 struct __sbuf _bf;
 int _lbfsize;


 void *_cookie;
 int (*_close)(void *);
 int (*_read) (void *, char *, int);
 fpos_t (*_seek) (void *, fpos_t, int);
 int (*_write)(void *, const char *, int);


 struct __sbuf _ub;
 struct __sFILEX *_extra;
 int _ur;


 unsigned char _ubuf[3];
 unsigned char _nbuf[1];


 struct __sbuf _lb;


 int _blksize;
 fpos_t _offset;
} FILE;


extern FILE *__stdinp;
extern FILE *__stdoutp;
extern FILE *__stderrp;

# 238 "/usr/include/stdio.h" 3 4

void clearerr(FILE *);
int fclose(FILE *);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int fgetc(FILE *);
int fgetpos(FILE * , fpos_t *);
char *fgets(char * , int, FILE *);



FILE *fopen(const char * , const char * ) __asm("_" "fopen" );

int fprintf(FILE * , const char * , ...) __attribute__((__format__ (__printf__, 2, 3)));
int fputc(int, FILE *);
int fputs(const char * , FILE * ) __asm("_" "fputs" );
size_t fread(void * , size_t, size_t, FILE * );
FILE *freopen(const char * , const char * ,
                 FILE * ) __asm("_" "freopen" );
int fscanf(FILE * , const char * , ...) __attribute__((__format__ (__scanf__, 2, 3)));
int fseek(FILE *, long, int);
int fsetpos(FILE *, const fpos_t *);
long ftell(FILE *);
size_t fwrite(const void * , size_t, size_t, FILE * ) __asm("_" "fwrite" );
int getc(FILE *);
int getchar(void);
char *gets(char *);
void perror(const char *);
int printf(const char * , ...) __attribute__((__format__ (__printf__, 1, 2)));
int putc(int, FILE *);
int putchar(int);
int puts(const char *);
int remove(const char *);
int rename (const char *, const char *);
void rewind(FILE *);
int scanf(const char * , ...) __attribute__((__format__ (__scanf__, 1, 2)));
void setbuf(FILE * , char * );
int setvbuf(FILE * , char * , int, size_t);
int sprintf(char * , const char * , ...) __attribute__((__format__ (__printf__, 2, 3)));
int sscanf(const char * , const char * , ...) __attribute__((__format__ (__scanf__, 2, 3)));
FILE *tmpfile(void);
char *tmpnam(char *);
int ungetc(int, FILE *);
int vfprintf(FILE * , const char * , va_list) __attribute__((__format__ (__printf__, 2, 0)));
int vprintf(const char * , va_list) __attribute__((__format__ (__printf__, 1, 0)));
int vsprintf(char * , const char * , va_list) __attribute__((__format__ (__printf__, 2, 0)));

# 296 "/usr/include/stdio.h" 3 4




char *ctermid(char *);





FILE *fdopen(int, const char *) __asm("_" "fdopen" );

int fileno(FILE *);

# 318 "/usr/include/stdio.h" 3 4

int pclose(FILE *);



FILE *popen(const char *, const char *) __asm("_" "popen" );


# 340 "/usr/include/stdio.h" 3 4

int __srget(FILE *);
int __svfscanf(FILE *, const char *, va_list) __attribute__((__format__ (__scanf__, 2, 0)));
int __swbuf(int, FILE *);








static __inline int __sputc(int _c, FILE *_p) {
 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf(_c, _p));
}
# 377 "/usr/include/stdio.h" 3 4

void flockfile(FILE *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);
int getc_unlocked(FILE *);
int getchar_unlocked(void);
int putc_unlocked(int, FILE *);
int putchar_unlocked(int);



int getw(FILE *);
int putw(int, FILE *);


char *tempnam(const char *, const char *) __asm("_" "tempnam" );

# 414 "/usr/include/stdio.h" 3 4
typedef __darwin_off_t off_t;



int fseeko(FILE *, off_t, int);
off_t ftello(FILE *);





int snprintf(char * , size_t, const char * , ...) __attribute__((__format__ (__printf__, 3, 4)));
int vfscanf(FILE * , const char * , va_list) __attribute__((__format__ (__scanf__, 2, 0)));
int vscanf(const char * , va_list) __attribute__((__format__ (__scanf__, 1, 0)));
int vsnprintf(char * , size_t, const char * , va_list) __attribute__((__format__ (__printf__, 3, 0)));
int vsscanf(const char * , const char * , va_list) __attribute__((__format__ (__scanf__, 2, 0)));

# 442 "/usr/include/stdio.h" 3 4
typedef __darwin_ssize_t ssize_t;



int dprintf(int, const char * , ...) __attribute__((__format__ (__printf__, 2, 3))) __attribute__((visibility("default")));
int vdprintf(int, const char * , va_list) __attribute__((__format__ (__printf__, 2, 0))) __attribute__((visibility("default")));
ssize_t getdelim(char ** , size_t * , int, FILE * ) __attribute__((visibility("default")));
ssize_t getline(char ** , size_t * , FILE * ) __attribute__((visibility("default")));









extern const int sys_nerr;
extern const char *const sys_errlist[];

int asprintf(char **, const char *, ...) __attribute__((__format__ (__printf__, 2, 3)));
char *ctermid_r(char *);
char *fgetln(FILE *, size_t *);
const char *fmtcheck(const char *, const char *);
int fpurge(FILE *);
void setbuffer(FILE *, char *, int);
int setlinebuf(FILE *);
int vasprintf(char **, const char *, va_list) __attribute__((__format__ (__printf__, 2, 0)));
FILE *zopen(const char *, const char *, int);





FILE *funopen(const void *,
                 int (*)(void *, char *, int),
                 int (*)(void *, const char *, int),
                 fpos_t (*)(void *, fpos_t, int),
                 int (*)(void *));

# 499 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/secure/_stdio.h" 1 3 4
# 31 "/usr/include/secure/_stdio.h" 3 4
# 1 "/usr/include/secure/_common.h" 1 3 4
# 32 "/usr/include/secure/_stdio.h" 2 3 4
# 45 "/usr/include/secure/_stdio.h" 3 4
extern int __sprintf_chk (char * , int, size_t,
     const char * , ...)
  ;




extern int __snprintf_chk (char * , size_t, int, size_t,
      const char * , ...)
  ;





extern int __vsprintf_chk (char * , int, size_t,
      const char * , va_list)
  ;




extern int __vsnprintf_chk (char * , size_t, int, size_t,
       const char * , va_list)
  ;
# 500 "/usr/include/stdio.h" 2 3 4
# 36 "iec_std_lib.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 65 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/sys/wait.h" 1 3 4
# 79 "/usr/include/sys/wait.h" 3 4
typedef enum {
 P_ALL,
 P_PID,
 P_PGID
} idtype_t;






typedef __darwin_pid_t pid_t;




typedef __darwin_id_t id_t;
# 116 "/usr/include/sys/wait.h" 3 4
# 1 "/usr/include/sys/signal.h" 1 3 4
# 73 "/usr/include/sys/signal.h" 3 4
# 1 "/usr/include/sys/appleapiopts.h" 1 3 4
# 74 "/usr/include/sys/signal.h" 2 3 4







# 1 "/usr/include/machine/signal.h" 1 3 4
# 32 "/usr/include/machine/signal.h" 3 4
# 1 "/usr/include/i386/signal.h" 1 3 4
# 39 "/usr/include/i386/signal.h" 3 4
typedef int sig_atomic_t;
# 55 "/usr/include/i386/signal.h" 3 4
# 1 "/usr/include/i386/_structs.h" 1 3 4
# 56 "/usr/include/i386/signal.h" 2 3 4
# 33 "/usr/include/machine/signal.h" 2 3 4
# 82 "/usr/include/sys/signal.h" 2 3 4
# 148 "/usr/include/sys/signal.h" 3 4
# 1 "/usr/include/sys/_structs.h" 1 3 4
# 57 "/usr/include/sys/_structs.h" 3 4
# 1 "/usr/include/machine/_structs.h" 1 3 4
# 29 "/usr/include/machine/_structs.h" 3 4
# 1 "/usr/include/i386/_structs.h" 1 3 4
# 38 "/usr/include/i386/_structs.h" 3 4
# 1 "/usr/include/mach/i386/_structs.h" 1 3 4
# 43 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_i386_thread_state
{
    unsigned int __eax;
    unsigned int __ebx;
    unsigned int __ecx;
    unsigned int __edx;
    unsigned int __edi;
    unsigned int __esi;
    unsigned int __ebp;
    unsigned int __esp;
    unsigned int __ss;
    unsigned int __eflags;
    unsigned int __eip;
    unsigned int __cs;
    unsigned int __ds;
    unsigned int __es;
    unsigned int __fs;
    unsigned int __gs;
};
# 89 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_fp_control
{
    unsigned short __invalid :1,
        __denorm :1,
    __zdiv :1,
    __ovrfl :1,
    __undfl :1,
    __precis :1,
      :2,
    __pc :2,





    __rc :2,






             :1,
      :3;
};
typedef struct __darwin_fp_control __darwin_fp_control_t;
# 147 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_fp_status
{
    unsigned short __invalid :1,
        __denorm :1,
    __zdiv :1,
    __ovrfl :1,
    __undfl :1,
    __precis :1,
    __stkflt :1,
    __errsumm :1,
    __c0 :1,
    __c1 :1,
    __c2 :1,
    __tos :3,
    __c3 :1,
    __busy :1;
};
typedef struct __darwin_fp_status __darwin_fp_status_t;
# 191 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_mmst_reg
{
 char __mmst_reg[10];
 char __mmst_rsrv[6];
};
# 210 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_xmm_reg
{
 char __xmm_reg[16];
};
# 232 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_i386_float_state
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;
 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;
 __uint16_t __fpu_rsrv2;
 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;
 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 char __fpu_rsrv4[14*16];
 int __fpu_reserved1;
};


struct __darwin_i386_avx_state
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;
 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;
 __uint16_t __fpu_rsrv2;
 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;
 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 char __fpu_rsrv4[14*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
};
# 402 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_i386_exception_state
{
 __uint16_t __trapno;
 __uint16_t __cpu;
 __uint32_t __err;
 __uint32_t __faultvaddr;
};
# 422 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_debug_state32
{
 unsigned int __dr0;
 unsigned int __dr1;
 unsigned int __dr2;
 unsigned int __dr3;
 unsigned int __dr4;
 unsigned int __dr5;
 unsigned int __dr6;
 unsigned int __dr7;
};
# 454 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_thread_state64
{
 __uint64_t __rax;
 __uint64_t __rbx;
 __uint64_t __rcx;
 __uint64_t __rdx;
 __uint64_t __rdi;
 __uint64_t __rsi;
 __uint64_t __rbp;
 __uint64_t __rsp;
 __uint64_t __r8;
 __uint64_t __r9;
 __uint64_t __r10;
 __uint64_t __r11;
 __uint64_t __r12;
 __uint64_t __r13;
 __uint64_t __r14;
 __uint64_t __r15;
 __uint64_t __rip;
 __uint64_t __rflags;
 __uint64_t __cs;
 __uint64_t __fs;
 __uint64_t __gs;
};
# 509 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_float_state64
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;


 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;

 __uint16_t __fpu_rsrv2;


 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;

 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 struct __darwin_xmm_reg __fpu_xmm8;
 struct __darwin_xmm_reg __fpu_xmm9;
 struct __darwin_xmm_reg __fpu_xmm10;
 struct __darwin_xmm_reg __fpu_xmm11;
 struct __darwin_xmm_reg __fpu_xmm12;
 struct __darwin_xmm_reg __fpu_xmm13;
 struct __darwin_xmm_reg __fpu_xmm14;
 struct __darwin_xmm_reg __fpu_xmm15;
 char __fpu_rsrv4[6*16];
 int __fpu_reserved1;
};


struct __darwin_x86_avx_state64
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;


 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;

 __uint16_t __fpu_rsrv2;


 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;

 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 struct __darwin_xmm_reg __fpu_xmm8;
 struct __darwin_xmm_reg __fpu_xmm9;
 struct __darwin_xmm_reg __fpu_xmm10;
 struct __darwin_xmm_reg __fpu_xmm11;
 struct __darwin_xmm_reg __fpu_xmm12;
 struct __darwin_xmm_reg __fpu_xmm13;
 struct __darwin_xmm_reg __fpu_xmm14;
 struct __darwin_xmm_reg __fpu_xmm15;
 char __fpu_rsrv4[6*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
 struct __darwin_xmm_reg __fpu_ymmh8;
 struct __darwin_xmm_reg __fpu_ymmh9;
 struct __darwin_xmm_reg __fpu_ymmh10;
 struct __darwin_xmm_reg __fpu_ymmh11;
 struct __darwin_xmm_reg __fpu_ymmh12;
 struct __darwin_xmm_reg __fpu_ymmh13;
 struct __darwin_xmm_reg __fpu_ymmh14;
 struct __darwin_xmm_reg __fpu_ymmh15;
};
# 751 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_exception_state64
{
    __uint16_t __trapno;
    __uint16_t __cpu;
    __uint32_t __err;
    __uint64_t __faultvaddr;
};
# 771 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_debug_state64
{
 __uint64_t __dr0;
 __uint64_t __dr1;
 __uint64_t __dr2;
 __uint64_t __dr3;
 __uint64_t __dr4;
 __uint64_t __dr5;
 __uint64_t __dr6;
 __uint64_t __dr7;
};
# 39 "/usr/include/i386/_structs.h" 2 3 4
# 48 "/usr/include/i386/_structs.h" 3 4
struct __darwin_mcontext32
{
 struct __darwin_i386_exception_state __es;
 struct __darwin_i386_thread_state __ss;
 struct __darwin_i386_float_state __fs;
};


struct __darwin_mcontext_avx32
{
 struct __darwin_i386_exception_state __es;
 struct __darwin_i386_thread_state __ss;
 struct __darwin_i386_avx_state __fs;
};
# 86 "/usr/include/i386/_structs.h" 3 4
struct __darwin_mcontext64
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_state64 __ss;
 struct __darwin_x86_float_state64 __fs;
};


struct __darwin_mcontext_avx64
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_state64 __ss;
 struct __darwin_x86_avx_state64 __fs;
};
# 127 "/usr/include/i386/_structs.h" 3 4
typedef struct __darwin_mcontext64 *mcontext_t;
# 30 "/usr/include/machine/_structs.h" 2 3 4
# 58 "/usr/include/sys/_structs.h" 2 3 4
# 75 "/usr/include/sys/_structs.h" 3 4
struct __darwin_sigaltstack
{
 void *ss_sp;
 __darwin_size_t ss_size;
 int ss_flags;
};
# 128 "/usr/include/sys/_structs.h" 3 4
struct __darwin_ucontext
{
 int uc_onstack;
 __darwin_sigset_t uc_sigmask;
 struct __darwin_sigaltstack uc_stack;
 struct __darwin_ucontext *uc_link;
 __darwin_size_t uc_mcsize;
 struct __darwin_mcontext64 *uc_mcontext;



};
# 218 "/usr/include/sys/_structs.h" 3 4
typedef struct __darwin_sigaltstack stack_t;
# 227 "/usr/include/sys/_structs.h" 3 4
typedef struct __darwin_ucontext ucontext_t;
# 149 "/usr/include/sys/signal.h" 2 3 4
# 157 "/usr/include/sys/signal.h" 3 4
typedef __darwin_pthread_attr_t pthread_attr_t;




typedef __darwin_sigset_t sigset_t;
# 172 "/usr/include/sys/signal.h" 3 4
typedef __darwin_uid_t uid_t;


union sigval {

 int sival_int;
 void *sival_ptr;
};





struct sigevent {
 int sigev_notify;
 int sigev_signo;
 union sigval sigev_value;
 void (*sigev_notify_function)(union sigval);
 pthread_attr_t *sigev_notify_attributes;
};


typedef struct __siginfo {
 int si_signo;
 int si_errno;
 int si_code;
 pid_t si_pid;
 uid_t si_uid;
 int si_status;
 void *si_addr;
 union sigval si_value;
 long si_band;
 unsigned long __pad[7];
} siginfo_t;
# 286 "/usr/include/sys/signal.h" 3 4
union __sigaction_u {
 void (*__sa_handler)(int);
 void (*__sa_sigaction)(int, struct __siginfo *,
         void *);
};


struct __sigaction {
 union __sigaction_u __sigaction_u;
 void (*sa_tramp)(void *, int, int, siginfo_t *, void *);
 sigset_t sa_mask;
 int sa_flags;
};




struct sigaction {
 union __sigaction_u __sigaction_u;
 sigset_t sa_mask;
 int sa_flags;
};
# 348 "/usr/include/sys/signal.h" 3 4
typedef void (*sig_t)(int);
# 365 "/usr/include/sys/signal.h" 3 4
struct sigvec {
 void (*sv_handler)(int);
 int sv_mask;
 int sv_flags;
};
# 384 "/usr/include/sys/signal.h" 3 4
struct sigstack {
 char *ss_sp;
 int ss_onstack;
};
# 406 "/usr/include/sys/signal.h" 3 4

void (*signal(int, void (*)(int)))(int);

# 117 "/usr/include/sys/wait.h" 2 3 4
# 1 "/usr/include/sys/resource.h" 1 3 4
# 77 "/usr/include/sys/resource.h" 3 4
# 1 "/usr/include/sys/_structs.h" 1 3 4
# 100 "/usr/include/sys/_structs.h" 3 4
struct timeval
{
 __darwin_time_t tv_sec;
 __darwin_suseconds_t tv_usec;
};
# 78 "/usr/include/sys/resource.h" 2 3 4
# 89 "/usr/include/sys/resource.h" 3 4
typedef __uint64_t rlim_t;
# 151 "/usr/include/sys/resource.h" 3 4
struct rusage {
 struct timeval ru_utime;
 struct timeval ru_stime;
# 162 "/usr/include/sys/resource.h" 3 4
 long ru_maxrss;

 long ru_ixrss;
 long ru_idrss;
 long ru_isrss;
 long ru_minflt;
 long ru_majflt;
 long ru_nswap;
 long ru_inblock;
 long ru_oublock;
 long ru_msgsnd;
 long ru_msgrcv;
 long ru_nsignals;
 long ru_nvcsw;
 long ru_nivcsw;


};
# 222 "/usr/include/sys/resource.h" 3 4
struct rlimit {
 rlim_t rlim_cur;
 rlim_t rlim_max;
};
# 244 "/usr/include/sys/resource.h" 3 4

int getpriority(int, id_t);

int getiopolicy_np(int, int) __attribute__((visibility("default")));

int getrlimit(int, struct rlimit *) __asm("_" "getrlimit" );
int getrusage(int, struct rusage *);
int setpriority(int, id_t, int);

int setiopolicy_np(int, int, int) __attribute__((visibility("default")));

int setrlimit(int, const struct rlimit *) __asm("_" "setrlimit" );

# 118 "/usr/include/sys/wait.h" 2 3 4
# 193 "/usr/include/sys/wait.h" 3 4
# 1 "/usr/include/machine/endian.h" 1 3 4
# 35 "/usr/include/machine/endian.h" 3 4
# 1 "/usr/include/i386/endian.h" 1 3 4
# 99 "/usr/include/i386/endian.h" 3 4
# 1 "/usr/include/sys/_endian.h" 1 3 4
# 124 "/usr/include/sys/_endian.h" 3 4
# 1 "/usr/include/libkern/_OSByteOrder.h" 1 3 4
# 66 "/usr/include/libkern/_OSByteOrder.h" 3 4
# 1 "/usr/include/libkern/i386/_OSByteOrder.h" 1 3 4
# 44 "/usr/include/libkern/i386/_OSByteOrder.h" 3 4
static __inline__
__uint16_t
_OSSwapInt16(
    __uint16_t _data
)
{
    return ((_data << 8) | (_data >> 8));
}

static __inline__
__uint32_t
_OSSwapInt32(
    __uint32_t _data
)
{

    return __builtin_bswap32(_data);




}


static __inline__
__uint64_t
_OSSwapInt64(
    __uint64_t _data
)
{
    return __builtin_bswap64(_data);
}
# 67 "/usr/include/libkern/_OSByteOrder.h" 2 3 4
# 125 "/usr/include/sys/_endian.h" 2 3 4
# 100 "/usr/include/i386/endian.h" 2 3 4
# 36 "/usr/include/machine/endian.h" 2 3 4
# 194 "/usr/include/sys/wait.h" 2 3 4







union wait {
 int w_status;



 struct {

  unsigned int w_Termsig:7,
    w_Coredump:1,
    w_Retcode:8,
    w_Filler:16;







 } w_T;





 struct {

  unsigned int w_Stopval:8,
    w_Stopsig:8,
    w_Filler:16;






 } w_S;
};
# 254 "/usr/include/sys/wait.h" 3 4

pid_t wait(int *) __asm("_" "wait" );
pid_t waitpid(pid_t, int *, int) __asm("_" "waitpid" );

int waitid(idtype_t, id_t, siginfo_t *, int) __asm("_" "waitid" );


pid_t wait3(int *, int, struct rusage *);
pid_t wait4(pid_t, int *, int, struct rusage *);


# 66 "/usr/include/stdlib.h" 2 3 4

# 1 "/usr/include/alloca.h" 1 3 4
# 35 "/usr/include/alloca.h" 3 4

void *alloca(size_t);

# 68 "/usr/include/stdlib.h" 2 3 4
# 81 "/usr/include/stdlib.h" 3 4
typedef __darwin_ct_rune_t ct_rune_t;




typedef __darwin_rune_t rune_t;






typedef __darwin_wchar_t wchar_t;



typedef struct {
 int quot;
 int rem;
} div_t;

typedef struct {
 long quot;
 long rem;
} ldiv_t;


typedef struct {
 long long quot;
 long long rem;
} lldiv_t;
# 134 "/usr/include/stdlib.h" 3 4
extern int __mb_cur_max;
# 144 "/usr/include/stdlib.h" 3 4

void abort(void) __attribute__((__noreturn__));
int abs(int) __attribute__((__const__));
int atexit(void (*)(void));
double atof(const char *);
int atoi(const char *);
long atol(const char *);

long long
  atoll(const char *);

void *bsearch(const void *, const void *, size_t,
     size_t, int (*)(const void *, const void *));
void *calloc(size_t, size_t);
div_t div(int, int) __attribute__((__const__));
void exit(int) __attribute__((__noreturn__));
void free(void *);
char *getenv(const char *);
long labs(long) __attribute__((__const__));
ldiv_t ldiv(long, long) __attribute__((__const__));

long long
  llabs(long long);
lldiv_t lldiv(long long, long long);

void *malloc(size_t);
int mblen(const char *, size_t);
size_t mbstowcs(wchar_t * , const char * , size_t);
int mbtowc(wchar_t * , const char * , size_t);
int posix_memalign(void **, size_t, size_t) __attribute__((visibility("default")));
void qsort(void *, size_t, size_t,
     int (*)(const void *, const void *));
int rand(void);
void *realloc(void *, size_t);
void srand(unsigned);
double strtod(const char *, char **) __asm("_" "strtod" );
float strtof(const char *, char **) __asm("_" "strtof" );
long strtol(const char *, char **, int);
long double
  strtold(const char *, char **) ;

long long
  strtoll(const char *, char **, int);

unsigned long
  strtoul(const char *, char **, int);

unsigned long long
  strtoull(const char *, char **, int);

int system(const char *) __asm("_" "system" );
size_t wcstombs(char * , const wchar_t * , size_t);
int wctomb(char *, wchar_t);


void _Exit(int) __attribute__((__noreturn__));
long a64l(const char *);
double drand48(void);
char *ecvt(double, int, int *, int *);
double erand48(unsigned short[3]);
char *fcvt(double, int, int *, int *);
char *gcvt(double, int, char *);
int getsubopt(char **, char * const *, char **);
int grantpt(int);

char *initstate(unsigned, char *, size_t);



long jrand48(unsigned short[3]);
char *l64a(long);
void lcong48(unsigned short[7]);
long lrand48(void);
char *mktemp(char *);
int mkstemp(char *);
long mrand48(void);
long nrand48(unsigned short[3]);
int posix_openpt(int);
char *ptsname(int);
int putenv(char *) __asm("_" "putenv" );
long random(void);
int rand_r(unsigned *);

char *realpath(const char * , char * ) __asm("_" "realpath" "$DARWIN_EXTSN");



unsigned short
 *seed48(unsigned short[3]);
int setenv(const char *, const char *, int) __asm("_" "setenv" );

void setkey(const char *) __asm("_" "setkey" );



char *setstate(const char *);
void srand48(long);

void srandom(unsigned);



int unlockpt(int);

int unsetenv(const char *) __asm("_" "unsetenv" );






# 1 "/usr/include/machine/types.h" 1 3 4
# 35 "/usr/include/machine/types.h" 3 4
# 1 "/usr/include/i386/types.h" 1 3 4
# 70 "/usr/include/i386/types.h" 3 4
# 1 "/usr/include/i386/_types.h" 1 3 4
# 71 "/usr/include/i386/types.h" 2 3 4
# 80 "/usr/include/i386/types.h" 3 4
typedef unsigned char u_int8_t;




typedef unsigned short u_int16_t;




typedef unsigned int u_int32_t;




typedef unsigned long long u_int64_t;


typedef int64_t register_t;
# 114 "/usr/include/i386/types.h" 3 4
typedef u_int64_t user_addr_t;
typedef u_int64_t user_size_t;
typedef int64_t user_ssize_t;
typedef int64_t user_long_t;
typedef u_int64_t user_ulong_t;
typedef int64_t user_time_t;
typedef int64_t user_off_t;







typedef u_int64_t syscall_arg_t;
# 36 "/usr/include/machine/types.h" 2 3 4
# 256 "/usr/include/stdlib.h" 2 3 4


typedef __darwin_dev_t dev_t;




typedef __darwin_mode_t mode_t;



u_int32_t
  arc4random(void);
void arc4random_addrandom(unsigned char * , int );
void arc4random_buf(void * , size_t ) __attribute__((visibility("default")));
void arc4random_stir(void);
u_int32_t
  arc4random_uniform(u_int32_t ) __attribute__((visibility("default")));

int atexit_b(void (^)(void)) __attribute__((visibility("default")));
void *bsearch_b(const void *, const void *, size_t,
     size_t, int (^)(const void *, const void *)) __attribute__((visibility("default")));



char *cgetcap(char *, const char *, int);
int cgetclose(void);
int cgetent(char **, char **, const char *);
int cgetfirst(char **, char **);
int cgetmatch(const char *, const char *);
int cgetnext(char **, char **);
int cgetnum(char *, const char *, long *);
int cgetset(const char *);
int cgetstr(char *, const char *, char **);
int cgetustr(char *, const char *, char **);

int daemon(int, int) __asm("_" "daemon" "$1050") __attribute__((deprecated,visibility("default")));
char *devname(dev_t, mode_t);
char *devname_r(dev_t, mode_t, char *buf, int len);
char *getbsize(int *, long *);
int getloadavg(double [], int);
const char
 *getprogname(void);

int heapsort(void *, size_t, size_t,
     int (*)(const void *, const void *));

int heapsort_b(void *, size_t, size_t,
     int (^)(const void *, const void *)) __attribute__((visibility("default")));

int mergesort(void *, size_t, size_t,
     int (*)(const void *, const void *));

int mergesort_b(void *, size_t, size_t,
     int (^)(const void *, const void *)) __attribute__((visibility("default")));

void psort(void *, size_t, size_t,
     int (*)(const void *, const void *)) __attribute__((visibility("default")));

void psort_b(void *, size_t, size_t,
     int (^)(const void *, const void *)) __attribute__((visibility("default")));

void psort_r(void *, size_t, size_t, void *,
     int (*)(void *, const void *, const void *)) __attribute__((visibility("default")));

void qsort_b(void *, size_t, size_t,
     int (^)(const void *, const void *)) __attribute__((visibility("default")));

void qsort_r(void *, size_t, size_t, void *,
     int (*)(void *, const void *, const void *));
int radixsort(const unsigned char **, int, const unsigned char *,
     unsigned);
void setprogname(const char *);
int sradixsort(const unsigned char **, int, const unsigned char *,
     unsigned);
void sranddev(void);
void srandomdev(void);
void *reallocf(void *, size_t);

long long
  strtoq(const char *, char **, int);
unsigned long long
  strtouq(const char *, char **, int);

extern char *suboptarg;
void *valloc(size_t);







# 37 "iec_std_lib.h" 2
# 1 "/usr/include/string.h" 1 3 4
# 79 "/usr/include/string.h" 3 4

void *memchr(const void *, int, size_t);
int memcmp(const void *, const void *, size_t);
void *memcpy(void *, const void *, size_t);
void *memmove(void *, const void *, size_t);
void *memset(void *, int, size_t);
char *strcat(char *, const char *);
char *strchr(const char *, int);
int strcmp(const char *, const char *);
int strcoll(const char *, const char *);
char *strcpy(char *, const char *);
size_t strcspn(const char *, const char *);
char *strerror(int) __asm("_" "strerror" );
size_t strlen(const char *);
char *strncat(char *, const char *, size_t);
int strncmp(const char *, const char *, size_t);
char *strncpy(char *, const char *, size_t);
char *strpbrk(const char *, const char *);
char *strrchr(const char *, int);
size_t strspn(const char *, const char *);
char *strstr(const char *, const char *);
char *strtok(char *, const char *);
size_t strxfrm(char *, const char *, size_t);

# 113 "/usr/include/string.h" 3 4

char *strtok_r(char *, const char *, char **);

# 125 "/usr/include/string.h" 3 4

int strerror_r(int, char *, size_t);
char *strdup(const char *);
void *memccpy(void *, const void *, int, size_t);

# 139 "/usr/include/string.h" 3 4

char *stpcpy(char *, const char *);
char *stpncpy(char *, const char *, size_t) __attribute__((visibility("default")));
char *strndup(const char *, size_t) __attribute__((visibility("default")));
size_t strnlen(const char *, size_t) __attribute__((visibility("default")));
char *strsignal(int sig);

# 158 "/usr/include/string.h" 3 4

void *memmem(const void *, size_t, const void *, size_t) __attribute__((visibility("default")));
void memset_pattern4(void *, const void *, size_t) __attribute__((visibility("default")));
void memset_pattern8(void *, const void *, size_t) __attribute__((visibility("default")));
void memset_pattern16(void *, const void *, size_t) __attribute__((visibility("default")));

char *strcasestr(const char *, const char *);
char *strnstr(const char *, const char *, size_t);
size_t strlcat(char *, const char *, size_t);
size_t strlcpy(char *, const char *, size_t);
void strmode(int, char *);
char *strsep(char **, const char *);


void swab(const void * , void * , ssize_t);







# 1 "/usr/include/strings.h" 1 3 4
# 71 "/usr/include/strings.h" 3 4



int bcmp(const void *, const void *, size_t) ;
void bcopy(const void *, void *, size_t) ;
void bzero(void *, size_t) ;
char *index(const char *, int) ;
char *rindex(const char *, int) ;


int ffs(int);
int strcasecmp(const char *, const char *);
int strncasecmp(const char *, const char *, size_t);





int ffsl(long) __attribute__((visibility("default")));
int fls(int) __attribute__((visibility("default")));
int flsl(long) __attribute__((visibility("default")));


# 1 "/usr/include/string.h" 1 3 4
# 95 "/usr/include/strings.h" 2 3 4
# 181 "/usr/include/string.h" 2 3 4
# 190 "/usr/include/string.h" 3 4
# 1 "/usr/include/secure/_string.h" 1 3 4
# 58 "/usr/include/secure/_string.h" 3 4
static __inline void *
__inline_memcpy_chk (void *__dest, const void *__src, size_t __len)
{
  return __builtin___memcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}






static __inline void *
__inline_memmove_chk (void *__dest, const void *__src, size_t __len)
{
  return __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}






static __inline void *
__inline_memset_chk (void *__dest, int __val, size_t __len)
{
  return __builtin___memset_chk (__dest, __val, __len, __builtin_object_size (__dest, 0));
}






static __inline char *
__inline_strcpy_chk (char * __dest, const char * __src)
{
  return __builtin___strcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}







static __inline char *
__inline_stpcpy_chk (char *__dest, const char *__src)
{
  return __builtin___stpcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}






static __inline char *
__inline_stpncpy_chk (char * __dest, const char * __src,
        size_t __len)
{
  return __builtin___stpncpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}







static __inline char *
__inline_strncpy_chk (char * __dest, const char * __src,
        size_t __len)
{
  return __builtin___strncpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}






static __inline char *
__inline_strcat_chk (char * __dest, const char * __src)
{
  return __builtin___strcat_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}







static __inline char *
__inline_strncat_chk (char * __dest, const char * __src,
        size_t __len)
{
  return __builtin___strncat_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}
# 191 "/usr/include/string.h" 2 3 4
# 38 "iec_std_lib.h" 2
# 1 "/usr/llvm-gcc-4.2/bin/../lib/gcc/i686-apple-darwin11/4.2.1/include/stdarg.h" 1 3 4
# 43 "/usr/llvm-gcc-4.2/bin/../lib/gcc/i686-apple-darwin11/4.2.1/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 39 "iec_std_lib.h" 2
# 51 "iec_std_lib.h"
# 1 "iec_types_all.h" 1
# 63 "iec_types_all.h"
# 1 "iec_types.h" 1



# 1 "/usr/llvm-gcc-4.2/bin/../lib/gcc/i686-apple-darwin11/4.2.1/include/limits.h" 1 3 4






# 1 "/usr/llvm-gcc-4.2/bin/../lib/gcc/i686-apple-darwin11/4.2.1/include/syslimits.h" 1 3 4
# 8 "/usr/llvm-gcc-4.2/bin/../lib/gcc/i686-apple-darwin11/4.2.1/include/limits.h" 2 3 4







# 1 "/Applications/Xcode.app/Contents/Developer/usr/llvm-gcc-4.2/lib/gcc/i686-apple-darwin11/4.2.1/include/limits.h" 1 3 4






# 1 "/Applications/Xcode.app/Contents/Developer/usr/llvm-gcc-4.2/lib/gcc/i686-apple-darwin11/4.2.1/include/syslimits.h" 1 3 4
# 8 "/Applications/Xcode.app/Contents/Developer/usr/llvm-gcc-4.2/lib/gcc/i686-apple-darwin11/4.2.1/include/limits.h" 2 3 4
# 16 "/usr/llvm-gcc-4.2/bin/../lib/gcc/i686-apple-darwin11/4.2.1/include/limits.h" 2 3 4
# 5 "iec_types.h" 2







typedef uint8_t IEC_BOOL;

typedef int8_t IEC_SINT;
typedef int16_t IEC_INT;
typedef int32_t IEC_DINT;
typedef int64_t IEC_LINT;

typedef uint8_t IEC_USINT;
typedef uint16_t IEC_UINT;
typedef uint32_t IEC_UDINT;
typedef uint64_t IEC_ULINT;

typedef uint8_t IEC_BYTE;
typedef uint16_t IEC_WORD;
typedef uint32_t IEC_DWORD;
typedef uint64_t IEC_LWORD;

typedef float IEC_REAL;
typedef double IEC_LREAL;

typedef struct {
    long int tv_sec;
    long int tv_nsec;
}__attribute__((packed)) IEC_TIMESPEC;

typedef IEC_TIMESPEC IEC_TIME;
typedef IEC_TIMESPEC IEC_DATE;
typedef IEC_TIMESPEC IEC_DT;
typedef IEC_TIMESPEC IEC_TOD;
# 50 "iec_types.h"
typedef int8_t __strlen_t;
typedef struct {
    __strlen_t len;
    uint8_t body[126];
} __attribute__((packed)) IEC_STRING;
# 64 "iec_types_all.h" 2
# 124 "iec_types_all.h"
 typedef IEC_REAL REAL;typedef struct { IEC_REAL value; IEC_BYTE flags;} __IEC_REAL_t;typedef struct { IEC_REAL *value; IEC_BYTE flags; IEC_REAL fvalue;} __IEC_REAL_p; typedef IEC_LREAL LREAL;typedef struct { IEC_LREAL value; IEC_BYTE flags;} __IEC_LREAL_t;typedef struct { IEC_LREAL *value; IEC_BYTE flags; IEC_LREAL fvalue;} __IEC_LREAL_p; typedef IEC_SINT SINT;typedef struct { IEC_SINT value; IEC_BYTE flags;} __IEC_SINT_t;typedef struct { IEC_SINT *value; IEC_BYTE flags; IEC_SINT fvalue;} __IEC_SINT_p; typedef IEC_INT INT;typedef struct { IEC_INT value; IEC_BYTE flags;} __IEC_INT_t;typedef struct { IEC_INT *value; IEC_BYTE flags; IEC_INT fvalue;} __IEC_INT_p; typedef IEC_DINT DINT;typedef struct { IEC_DINT value; IEC_BYTE flags;} __IEC_DINT_t;typedef struct { IEC_DINT *value; IEC_BYTE flags; IEC_DINT fvalue;} __IEC_DINT_p; typedef IEC_LINT LINT;typedef struct { IEC_LINT value; IEC_BYTE flags;} __IEC_LINT_t;typedef struct { IEC_LINT *value; IEC_BYTE flags; IEC_LINT fvalue;} __IEC_LINT_p; typedef IEC_USINT USINT;typedef struct { IEC_USINT value; IEC_BYTE flags;} __IEC_USINT_t;typedef struct { IEC_USINT *value; IEC_BYTE flags; IEC_USINT fvalue;} __IEC_USINT_p; typedef IEC_UINT UINT;typedef struct { IEC_UINT value; IEC_BYTE flags;} __IEC_UINT_t;typedef struct { IEC_UINT *value; IEC_BYTE flags; IEC_UINT fvalue;} __IEC_UINT_p; typedef IEC_UDINT UDINT;typedef struct { IEC_UDINT value; IEC_BYTE flags;} __IEC_UDINT_t;typedef struct { IEC_UDINT *value; IEC_BYTE flags; IEC_UDINT fvalue;} __IEC_UDINT_p; typedef IEC_ULINT ULINT;typedef struct { IEC_ULINT value; IEC_BYTE flags;} __IEC_ULINT_t;typedef struct { IEC_ULINT *value; IEC_BYTE flags; IEC_ULINT fvalue;} __IEC_ULINT_p; typedef IEC_TIME TIME;typedef struct { IEC_TIME value; IEC_BYTE flags;} __IEC_TIME_t;typedef struct { IEC_TIME *value; IEC_BYTE flags; IEC_TIME fvalue;} __IEC_TIME_p; typedef IEC_BYTE BYTE;typedef struct { IEC_BYTE value; IEC_BYTE flags;} __IEC_BYTE_t;typedef struct { IEC_BYTE *value; IEC_BYTE flags; IEC_BYTE fvalue;} __IEC_BYTE_p; typedef IEC_WORD WORD;typedef struct { IEC_WORD value; IEC_BYTE flags;} __IEC_WORD_t;typedef struct { IEC_WORD *value; IEC_BYTE flags; IEC_WORD fvalue;} __IEC_WORD_p; typedef IEC_DWORD DWORD;typedef struct { IEC_DWORD value; IEC_BYTE flags;} __IEC_DWORD_t;typedef struct { IEC_DWORD *value; IEC_BYTE flags; IEC_DWORD fvalue;} __IEC_DWORD_p; typedef IEC_LWORD LWORD;typedef struct { IEC_LWORD value; IEC_BYTE flags;} __IEC_LWORD_t;typedef struct { IEC_LWORD *value; IEC_BYTE flags; IEC_LWORD fvalue;} __IEC_LWORD_p; typedef IEC_BOOL BOOL;typedef struct { IEC_BOOL value; IEC_BYTE flags;} __IEC_BOOL_t;typedef struct { IEC_BOOL *value; IEC_BYTE flags; IEC_BOOL fvalue;} __IEC_BOOL_p; typedef IEC_STRING STRING;typedef struct { IEC_STRING value; IEC_BYTE flags;} __IEC_STRING_t;typedef struct { IEC_STRING *value; IEC_BYTE flags; IEC_STRING fvalue;} __IEC_STRING_p; typedef IEC_DATE DATE;typedef struct { IEC_DATE value; IEC_BYTE flags;} __IEC_DATE_t;typedef struct { IEC_DATE *value; IEC_BYTE flags; IEC_DATE fvalue;} __IEC_DATE_p; typedef IEC_TOD TOD;typedef struct { IEC_TOD value; IEC_BYTE flags;} __IEC_TOD_t;typedef struct { IEC_TOD *value; IEC_BYTE flags; IEC_TOD fvalue;} __IEC_TOD_p; typedef IEC_DT DT;typedef struct { IEC_DT value; IEC_BYTE flags;} __IEC_DT_t;typedef struct { IEC_DT *value; IEC_BYTE flags; IEC_DT fvalue;} __IEC_DT_p;

typedef struct {
  __IEC_BOOL_t state;
  BOOL prev_state;
  TIME elapsed_time;
} STEP;

typedef struct {
  BOOL stored;
  BOOL state;
  BOOL set;
  BOOL reset;
  TIME set_remaining_time;
  TIME reset_remaining_time;
} ACTION;
# 148 "iec_types_all.h"
typedef enum{
  REAL_ENUM, LREAL_ENUM, SINT_ENUM, INT_ENUM, DINT_ENUM, LINT_ENUM, USINT_ENUM, UINT_ENUM, UDINT_ENUM, ULINT_ENUM, TIME_ENUM, BYTE_ENUM, WORD_ENUM, DWORD_ENUM, LWORD_ENUM, BOOL_ENUM, STRING_ENUM, DATE_ENUM, TOD_ENUM, DT_ENUM,
  REAL_P_ENUM, LREAL_P_ENUM, SINT_P_ENUM, INT_P_ENUM, DINT_P_ENUM, LINT_P_ENUM, USINT_P_ENUM, UINT_P_ENUM, UDINT_P_ENUM, ULINT_P_ENUM, TIME_P_ENUM, BYTE_P_ENUM, WORD_P_ENUM, DWORD_P_ENUM, LWORD_P_ENUM, BOOL_P_ENUM, STRING_P_ENUM, DATE_P_ENUM, TOD_P_ENUM, DT_P_ENUM,
  REAL_O_ENUM, LREAL_O_ENUM, SINT_O_ENUM, INT_O_ENUM, DINT_O_ENUM, LINT_O_ENUM, USINT_O_ENUM, UINT_O_ENUM, UDINT_O_ENUM, ULINT_O_ENUM, TIME_O_ENUM, BYTE_O_ENUM, WORD_O_ENUM, DWORD_O_ENUM, LWORD_O_ENUM, BOOL_O_ENUM, STRING_O_ENUM, DATE_O_ENUM, TOD_O_ENUM, DT_O_ENUM,

  UNKNOWN_ENUM
} __IEC_types_enum;







static inline USINT __get_type_enum_size(__IEC_types_enum t){
 switch(t){
  case REAL_ENUM: case REAL_O_ENUM: case REAL_P_ENUM: return sizeof(REAL); case LREAL_ENUM: case LREAL_O_ENUM: case LREAL_P_ENUM: return sizeof(LREAL); case SINT_ENUM: case SINT_O_ENUM: case SINT_P_ENUM: return sizeof(SINT); case INT_ENUM: case INT_O_ENUM: case INT_P_ENUM: return sizeof(INT); case DINT_ENUM: case DINT_O_ENUM: case DINT_P_ENUM: return sizeof(DINT); case LINT_ENUM: case LINT_O_ENUM: case LINT_P_ENUM: return sizeof(LINT); case USINT_ENUM: case USINT_O_ENUM: case USINT_P_ENUM: return sizeof(USINT); case UINT_ENUM: case UINT_O_ENUM: case UINT_P_ENUM: return sizeof(UINT); case UDINT_ENUM: case UDINT_O_ENUM: case UDINT_P_ENUM: return sizeof(UDINT); case ULINT_ENUM: case ULINT_O_ENUM: case ULINT_P_ENUM: return sizeof(ULINT); case TIME_ENUM: case TIME_O_ENUM: case TIME_P_ENUM: return sizeof(TIME); case BYTE_ENUM: case BYTE_O_ENUM: case BYTE_P_ENUM: return sizeof(BYTE); case WORD_ENUM: case WORD_O_ENUM: case WORD_P_ENUM: return sizeof(WORD); case DWORD_ENUM: case DWORD_O_ENUM: case DWORD_P_ENUM: return sizeof(DWORD); case LWORD_ENUM: case LWORD_O_ENUM: case LWORD_P_ENUM: return sizeof(LWORD); case BOOL_ENUM: case BOOL_O_ENUM: case BOOL_P_ENUM: return sizeof(BOOL); case STRING_ENUM: case STRING_O_ENUM: case STRING_P_ENUM: return sizeof(STRING); case DATE_ENUM: case DATE_O_ENUM: case DATE_P_ENUM: return sizeof(DATE); case TOD_ENUM: case TOD_O_ENUM: case TOD_P_ENUM: return sizeof(TOD); case DT_ENUM: case DT_O_ENUM: case DT_P_ENUM: return sizeof(DT);


  default:
   return 0;
 }
 return 0;
}
# 52 "iec_std_lib.h" 2

extern TIME __CURRENT_TIME;
extern BOOL __DEBUG;
# 133 "iec_std_lib.h"
typedef union __IL_DEFVAR_T {
    BOOL BOOLvar;

    SINT SINTvar;
    INT INTvar;
    DINT DINTvar;
    LINT LINTvar;

    USINT USINTvar;
    UINT UINTvar;
    UDINT UDINTvar;
    ULINT ULINTvar;

    BYTE BYTEvar;
    WORD WORDvar;
    DWORD DWORDvar;
    LWORD LWORDvar;

    REAL REALvar;
    LREAL LREALvar;

    TIME TIMEvar;
    TOD TODvar;
    DT DTvar;
    DATE DATEvar;
} __IL_DEFVAR_T;
# 178 "iec_std_lib.h"
static inline void __iec_error(void) {

  fprintf(__stderrp, "IEC 61131-3 runtime error.\n");

}





static inline void __normalize_timespec (IEC_TIMESPEC *ts) {
  if( ts->tv_nsec < -1000000000 || (( ts->tv_sec > 0 ) && ( ts->tv_nsec < 0 ))){
    ts->tv_sec--;
    ts->tv_nsec += 1000000000;
  }
  if( ts->tv_nsec > 1000000000 || (( ts->tv_sec < 0 ) && ( ts->tv_nsec > 0 ))){
    ts->tv_sec++;
    ts->tv_nsec -= 1000000000;
  }
}





static inline IEC_TIMESPEC __time_to_timespec(int sign, double mseconds, double seconds, double minutes, double hours, double days) {
  IEC_TIMESPEC ts;


  long double total_sec = ((days*24 + hours)*60 + minutes)*60 + seconds + mseconds/1e3;
  if (sign >= 0) sign = 1; else sign = -1;
  ts.tv_sec = sign * (long int)total_sec;
  ts.tv_nsec = sign * (long int)((total_sec - ts.tv_sec)*1e9);

  return ts;
}


static inline IEC_TIMESPEC __tod_to_timespec(double seconds, double minutes, double hours) {
  IEC_TIMESPEC ts;

  long double total_sec = (hours*60 + minutes)*60 + seconds;
  ts.tv_sec = (long int)total_sec;
  ts.tv_nsec = (long int)((total_sec - ts.tv_sec)*1e9);

  return ts;
}

static inline IEC_TIMESPEC __date_to_timespec(int day, int month, int year) {
  IEC_TIMESPEC ts;
  struct tm broken_down_time;
  time_t epoch_seconds;

  broken_down_time.tm_sec = 0;
  broken_down_time.tm_min = 0;
  broken_down_time.tm_hour = 0;
  broken_down_time.tm_mday = day;
  broken_down_time.tm_mon = month - 1;
  broken_down_time.tm_year = year - 1900;

  epoch_seconds = mktime(&broken_down_time);

  if ((time_t)(-1) == epoch_seconds)
    __iec_error();

  ts.tv_sec = epoch_seconds;
  ts.tv_nsec = 0;

  return ts;
}

static inline IEC_TIMESPEC __dt_to_timespec(double seconds, double minutes, double hours, int day, int month, int year) {
  IEC_TIMESPEC ts;
  struct tm broken_down_time;
  time_t epoch_seconds;

  long double total_sec = (hours*60 + minutes)*60 + seconds;
  ts.tv_sec = (long int)total_sec;
  ts.tv_nsec = (long int)((total_sec - ts.tv_sec)*1e9);

  broken_down_time.tm_sec = 0;
  broken_down_time.tm_min = 0;
  broken_down_time.tm_hour = 0;
  broken_down_time.tm_mday = day;
  broken_down_time.tm_mon = month - 1;
  broken_down_time.tm_year = year - 1900;

  epoch_seconds = mktime(&broken_down_time);
  if ((time_t)(-1) == epoch_seconds)
    __iec_error();

  ts.tv_sec += epoch_seconds;
  if (ts.tv_sec < epoch_seconds)

    __iec_error();

  return ts;
}







static inline TIME __time_add(TIME IN1, TIME IN2){
  TIME res ={IN1.tv_sec + IN2.tv_sec,
             IN1.tv_nsec + IN2.tv_nsec };
  __normalize_timespec(&res);
  return res;
}
static inline TIME __time_sub(TIME IN1, TIME IN2){
  TIME res ={IN1.tv_sec - IN2.tv_sec,
             IN1.tv_nsec - IN2.tv_nsec };
  __normalize_timespec(&res);
  return res;
}
static inline TIME __time_mul(TIME IN1, LREAL IN2){
  LREAL s_f = IN1.tv_sec * IN2;
  time_t s = s_f;
  div_t ns = div((LREAL)IN1.tv_nsec * IN2, 1000000000);
  TIME res = {s + ns.quot,
              ns.rem + (s_f - s) * 1000000000 };
  __normalize_timespec(&res);
  return res;
}
static inline TIME __time_div(TIME IN1, LREAL IN2){
  LREAL s_f = IN1.tv_sec / IN2;
  time_t s = s_f;
  TIME res = {s,
              IN1.tv_nsec / IN2 + (s_f - s) * 1000000000 };
  __normalize_timespec(&res);
  return res;
}
# 320 "iec_std_lib.h"
static inline LINT __real_round(LREAL IN) {
 return fmod(IN, 1) == 0 ? ((LINT)IN / 2) * 2 : (LINT)IN;
}
static inline LINT __preal_to_sint(LREAL IN) {
   return IN >= 0 ? __real_round(IN + 0.5) : __real_round(IN - 0.5);
}
static inline LINT __preal_to_uint(LREAL IN) {
   return IN >= 0 ? __real_round(IN + 0.5) : 0;
}
static inline LINT __real_to_sint(LREAL IN) {return (LINT)__preal_to_sint(IN);}
static inline LWORD __real_to_bit(LREAL IN) {return (LWORD)__preal_to_uint(IN);}
static inline ULINT __real_to_uint(LREAL IN) {return (ULINT)__preal_to_uint(IN);}




static inline STRING __bool_to_string(BOOL IN) {
    if(IN) return (STRING){4, "TRUE"};
    return (STRING){5,"FALSE"};
}
static inline STRING __bit_to_string(LWORD IN) {
    STRING res;
    res = (STRING){0,""};
    res.len = __builtin___snprintf_chk ((char*)res.body, 126, 0, __builtin_object_size ((char*)res.body, 2 > 1), "16#%llx",(long long unsigned int)IN);
    if(res.len > 126) res.len = 126;
    return res;
}
static inline STRING __real_to_string(LREAL IN) {
    STRING res;
    res = (STRING){0,""};
    res.len = __builtin___snprintf_chk ((char*)res.body, 126, 0, __builtin_object_size ((char*)res.body, 2 > 1), "%.10g", IN);
    if(res.len > 126) res.len = 126;
    return res;
}
static inline STRING __sint_to_string(LINT IN) {
    STRING res;
    res = (STRING){0,""};
    res.len = __builtin___snprintf_chk ((char*)res.body, 126, 0, __builtin_object_size ((char*)res.body, 2 > 1), "%lld", (long long int)IN);
    if(res.len > 126) res.len = 126;
    return res;
}
static inline STRING __uint_to_string(ULINT IN) {
    STRING res;
    res = (STRING){0,""};
    res.len = __builtin___snprintf_chk ((char*)res.body, 126, 0, __builtin_object_size ((char*)res.body, 2 > 1), "%llu", (long long unsigned int)IN);
    if(res.len > 126) res.len = 126;
    return res;
}



static inline BOOL __string_to_bool(STRING IN) {
    return IN.len == 5 ? !memcmp(&IN.body,"TRUE", IN.len) : 0;
}

static inline LINT __pstring_to_sint(STRING* IN) {
    LINT res = 0;
    __strlen_t l;
    unsigned int shift = 0;

    if(IN->body[0]=='2' && IN->body[1]=='#'){

        for(l = IN->len - 1; l >= 2 && shift < 64; l--)
        {
            char c = IN->body[l];
            if( c >= '0' && c <= '1'){
                res |= ( c - '0') << shift;
                shift += 1;
            }
        }
    }else if(IN->body[0]=='8' && IN->body[1]=='#'){

        for(l = IN->len - 1; l >= 2 && shift < 64; l--)
        {
            char c = IN->body[l];
            if( c >= '0' && c <= '7'){
                res |= ( c - '0') << shift;
                shift += 3;
            }
        }
    }else if(IN->body[0]=='1' && IN->body[1]=='6' && IN->body[2]=='#'){

        for(l = IN->len - 1; l >= 3 && shift < 64; l--)
        {
            char c = IN->body[l];
            if( c >= '0' && c <= '9'){
                res |= (LWORD)( c - '0') << shift;
                shift += 4;
            }else if( c >= 'a' && c <= 'f'){
                res |= (LWORD)( c - 'a' + 10 ) << shift;
                shift += 4;
            }else if( c >= 'A' && c <= 'F'){
                res |= (LWORD)( c - 'A' + 10 ) << shift;
                shift += 4;
            }
        }
    }else{

        LINT fac = IN->body[0] == '-' ? -1 : 1;
        for(l = IN->len - 1; l >= 0 && shift < 20; l--)
        {
            char c = IN->body[l];
            if( c >= '0' && c <= '9'){
                res += ( c - '0') * fac;
                fac *= 10;
                shift += 1;
            }else if( c >= '.' ){
                res = 0;
                fac = IN->body[0] == '-' ? -1 : 1;
                shift = 0;
            }
        }
    }
    return res;
}

static inline LINT __string_to_sint(STRING IN) {return (LINT)__pstring_to_sint(&IN);}
static inline LWORD __string_to_bit (STRING IN) {return (LWORD)__pstring_to_sint(&IN);}
static inline ULINT __string_to_uint(STRING IN) {return (ULINT)__pstring_to_sint(&IN);}
static inline LREAL __string_to_real(STRING IN) {
    __strlen_t l;
    l = IN.len;

    while(--l > 0 && IN.body[l] != '.');
    if(l != 0){
        return atof((const char *)&IN.body);
    }else{
        return (LREAL)__pstring_to_sint(&IN);
    }
}




static inline TIME __int_to_time(LINT IN) {return (TIME){IN, 0};}
static inline TIME __real_to_time(LREAL IN) {return (TIME){IN, (IN - (LINT)IN) * 1000000000};}
static inline TIME __string_to_time(STRING IN){
    __strlen_t l;
# 480 "iec_std_lib.h"
    l = IN.len;
    while(--l > 0 && IN.body[l] != '.');
    if(l != 0){
        LREAL IN_val = atof((const char *)&IN.body);
        return (TIME){IN_val, (IN_val - (LINT)IN_val)*1000000000};
    }else{
        return (TIME){__pstring_to_sint(&IN), 0};
    }
}




static inline LREAL __time_to_real(TIME IN){
    return (LREAL)IN.tv_sec + ((LREAL)IN.tv_nsec/1000000000);
}
static inline LINT __time_to_int(TIME IN) {return IN.tv_sec;}
static inline STRING __time_to_string(TIME IN){
    STRING res;
    div_t days;

    res = (STRING){0,""};
    days = div(IN.tv_sec ,86400);
    if(!days.rem && IN.tv_nsec == 0){
        res.len = __builtin___snprintf_chk ((char*)&res.body, 126, 0, __builtin_object_size ((char*)&res.body, 2 > 1), "T#%dd", days.quot);
    }else{
        div_t hours = div(days.rem, 3600);
        if(!hours.rem && IN.tv_nsec == 0){
            res.len = __builtin___snprintf_chk ((char*)&res.body, 126, 0, __builtin_object_size ((char*)&res.body, 2 > 1), "T#%dd%dh", days.quot, hours.quot);
        }else{
            div_t minuts = div(hours.rem, 60);
            if(!minuts.rem && IN.tv_nsec == 0){
                res.len = __builtin___snprintf_chk ((char*)&res.body, 126, 0, __builtin_object_size ((char*)&res.body, 2 > 1), "T#%dd%dh%dm", days.quot, hours.quot, minuts.quot);
            }else{
                if(IN.tv_nsec == 0){
                    res.len = __builtin___snprintf_chk ((char*)&res.body, 126, 0, __builtin_object_size ((char*)&res.body, 2 > 1), "T#%dd%dh%dm%ds", days.quot, hours.quot, minuts.quot, minuts.rem);
                }else{
                    res.len = __builtin___snprintf_chk ((char*)&res.body, 126, 0, __builtin_object_size ((char*)&res.body, 2 > 1), "T#%dd%dh%dm%ds%gms", days.quot, hours.quot, minuts.quot, minuts.rem, (LREAL)IN.tv_nsec / 1000000);
                }
            }
        }
    }
    if(res.len > 126) res.len = 126;
    return res;
}
static inline STRING __date_to_string(DATE IN){
    STRING res;
    struct tm* broken_down_time;
    time_t seconds;

    res = (STRING){0,""};
    seconds = IN.tv_sec;
    if (((void *)0) == (broken_down_time = localtime(&seconds))){
        __iec_error();
        return (STRING){7,"D#ERROR"};
    }
    res.len = __builtin___snprintf_chk ((char*)&res.body, 126, 0, __builtin_object_size ((char*)&res.body, 2 > 1), "D#%d-%2.2d-%2.2d", broken_down_time->tm_year + 1900, broken_down_time->tm_mon + 1, broken_down_time->tm_mday);
    if(res.len > 126) res.len = 126;
    return res;
}
static inline STRING __tod_to_string(TOD IN){
    STRING res;
    struct tm* broken_down_time;
    time_t seconds;

    res = (STRING){0,""};
    seconds = IN.tv_sec;
    if (((void *)0) == (broken_down_time = localtime(&seconds))){
        __iec_error();
        return (STRING){9,"TOD#ERROR"};
    }
    if(IN.tv_nsec == 0){
        res.len = __builtin___snprintf_chk ((char*)&res.body, 126, 0, __builtin_object_size ((char*)&res.body, 2 > 1), "TOD#%2.2d:%2.2d:%d", broken_down_time->tm_hour, broken_down_time->tm_min, broken_down_time->tm_sec);
    }else{
        res.len = __builtin___snprintf_chk ((char*)&res.body, 126, 0, __builtin_object_size ((char*)&res.body, 2 > 1), "TOD#%2.2d:%2.2d:%g", broken_down_time->tm_hour, broken_down_time->tm_min, (LREAL)broken_down_time->tm_sec + (LREAL)IN.tv_nsec / 1e9);
    }
    if(res.len > 126) res.len = 126;
    return res;
}
static inline STRING __dt_to_string(DT IN){
    STRING res;
    struct tm* broken_down_time;
    time_t seconds;

    seconds = IN.tv_sec;
    if (((void *)0) == (broken_down_time = localtime(&seconds))){
        __iec_error();
        return (STRING){8,"DT#ERROR"};
    }
    if(IN.tv_nsec == 0){
        res.len = __builtin___snprintf_chk ((char*)&res.body, 126, 0, __builtin_object_size ((char*)&res.body, 2 > 1), "DT#%d-%2.2d-%2.2d-%2.2d:%2.2d:%d", broken_down_time->tm_year, broken_down_time->tm_mon, broken_down_time->tm_mday, broken_down_time->tm_hour, broken_down_time->tm_min, broken_down_time->tm_sec);






    }else{
        res.len = __builtin___snprintf_chk ((char*)&res.body, 126, 0, __builtin_object_size ((char*)&res.body, 2 > 1), "DT#%d-%2.2d-%2.2d-%2.2d:%2.2d:%g", broken_down_time->tm_year, broken_down_time->tm_mon, broken_down_time->tm_mday, broken_down_time->tm_hour, broken_down_time->tm_min, (LREAL)broken_down_time->tm_sec + ((LREAL)IN.tv_nsec / 1e9));






    }
    if(res.len > 126) res.len = 126;
    return res;
}





static inline TOD __date_and_time_to_time_of_day(DT IN) {return (TOD){IN.tv_sec % 86400, IN.tv_nsec};}
static inline DATE __date_and_time_to_date(DT IN){return (DATE){IN.tv_sec - (IN.tv_sec % (24*60*60)), 0};}





static inline ULINT __bcd_to_uint(LWORD IN){
    ULINT res;
    ULINT i;

    res = IN & 0xf;
    for(i = 10ULL; i <= 1000000000000000ULL; i *= 10){
        if(!(IN >>= 4))
            break;
        res += (IN & 0xf) * i;
    }
    return res;
}

static inline LWORD __uint_to_bcd(ULINT IN){
    LWORD res;
    USINT i;

    res = IN % 10;
    for(i = 4; i<=60; i += 4){
        if(!(IN /= 10))
            break;
        res |= (IN % 10) << i;
    }
    return res;
}
# 636 "iec_std_lib.h"
 static inline REAL __move_REAL(REAL op1) {return op1;} static inline LREAL __move_LREAL(LREAL op1) {return op1;} static inline SINT __move_SINT(SINT op1) {return op1;} static inline INT __move_INT(INT op1) {return op1;} static inline DINT __move_DINT(DINT op1) {return op1;} static inline LINT __move_LINT(LINT op1) {return op1;} static inline USINT __move_USINT(USINT op1) {return op1;} static inline UINT __move_UINT(UINT op1) {return op1;} static inline UDINT __move_UDINT(UDINT op1) {return op1;} static inline ULINT __move_ULINT(ULINT op1) {return op1;} static inline TIME __move_TIME(TIME op1) {return op1;} static inline BYTE __move_BYTE(BYTE op1) {return op1;} static inline WORD __move_WORD(WORD op1) {return op1;} static inline DWORD __move_DWORD(DWORD op1) {return op1;} static inline LWORD __move_LWORD(LWORD op1) {return op1;} static inline BOOL __move_BOOL(BOOL op1) {return op1;} static inline STRING __move_STRING(STRING op1) {return op1;} static inline DATE __move_DATE(DATE op1) {return op1;} static inline TOD __move_TOD(TOD op1) {return op1;} static inline DT __move_DT(DT op1) {return op1;}
# 734 "iec_std_lib.h"
static inline BOOL REAL_TO_BOOL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL LREAL_TO_BOOL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL SINT_TO_BOOL(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL INT_TO_BOOL(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL DINT_TO_BOOL(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL LINT_TO_BOOL(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL USINT_TO_BOOL(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL UINT_TO_BOOL(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL UDINT_TO_BOOL(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL ULINT_TO_BOOL(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;}
static inline BOOL BYTE_TO_BOOL(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL WORD_TO_BOOL(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL DWORD_TO_BOOL(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;} static inline BOOL LWORD_TO_BOOL(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op == 0 ? 0 : 1;}







static inline BOOL TIME_TO_BOOL(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op.tv_sec == 0 && op.tv_nsec == 0 ? 0 : 1;}
static inline BOOL DATE_TO_BOOL(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op.tv_sec == 0 && op.tv_nsec == 0 ? 0 : 1;} static inline BOOL TOD_TO_BOOL(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op.tv_sec == 0 && op.tv_nsec == 0 ? 0 : 1;} static inline BOOL DT_TO_BOOL(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op.tv_sec == 0 && op.tv_nsec == 0 ? 0 : 1;}
# 757 "iec_std_lib.h"
static inline REAL BYTE_TO_REAL(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL BYTE_TO_LREAL(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT BYTE_TO_SINT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT BYTE_TO_INT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT BYTE_TO_DINT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT BYTE_TO_LINT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT BYTE_TO_USINT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT BYTE_TO_UINT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT BYTE_TO_UDINT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT BYTE_TO_ULINT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline REAL WORD_TO_REAL(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL WORD_TO_LREAL(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT WORD_TO_SINT(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT WORD_TO_INT(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT WORD_TO_DINT(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT WORD_TO_LINT(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT WORD_TO_USINT(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT WORD_TO_UINT(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT WORD_TO_UDINT(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT WORD_TO_ULINT(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline REAL DWORD_TO_REAL(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL DWORD_TO_LREAL(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT DWORD_TO_SINT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT DWORD_TO_INT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT DWORD_TO_DINT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT DWORD_TO_LINT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT DWORD_TO_USINT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT DWORD_TO_UINT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT DWORD_TO_UDINT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT DWORD_TO_ULINT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline REAL LWORD_TO_REAL(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL LWORD_TO_LREAL(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT LWORD_TO_SINT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT LWORD_TO_INT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT LWORD_TO_DINT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT LWORD_TO_LINT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT LWORD_TO_USINT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT LWORD_TO_UINT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT LWORD_TO_UDINT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT LWORD_TO_ULINT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline REAL BOOL_TO_REAL(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL BOOL_TO_LREAL(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT BOOL_TO_SINT(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT BOOL_TO_INT(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT BOOL_TO_DINT(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT BOOL_TO_LINT(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT BOOL_TO_USINT(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT BOOL_TO_UINT(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT BOOL_TO_UDINT(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT BOOL_TO_ULINT(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);}
static inline BYTE BYTE_TO_BYTE(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD BYTE_TO_WORD(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD BYTE_TO_DWORD(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD BYTE_TO_LWORD(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);} static inline BYTE WORD_TO_BYTE(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD WORD_TO_WORD(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD WORD_TO_DWORD(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD WORD_TO_LWORD(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);} static inline BYTE DWORD_TO_BYTE(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD DWORD_TO_WORD(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD DWORD_TO_DWORD(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD DWORD_TO_LWORD(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);} static inline BYTE LWORD_TO_BYTE(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD LWORD_TO_WORD(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD LWORD_TO_DWORD(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD LWORD_TO_LWORD(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);} static inline BYTE BOOL_TO_BYTE(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD BOOL_TO_WORD(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD BOOL_TO_DWORD(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD BOOL_TO_LWORD(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);}




static inline REAL SINT_TO_REAL(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL SINT_TO_LREAL(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT SINT_TO_SINT(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT SINT_TO_INT(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT SINT_TO_DINT(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT SINT_TO_LINT(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT SINT_TO_USINT(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT SINT_TO_UINT(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT SINT_TO_UDINT(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT SINT_TO_ULINT(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline REAL INT_TO_REAL(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL INT_TO_LREAL(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT INT_TO_SINT(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT INT_TO_INT(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT INT_TO_DINT(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT INT_TO_LINT(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT INT_TO_USINT(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT INT_TO_UINT(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT INT_TO_UDINT(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT INT_TO_ULINT(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline REAL DINT_TO_REAL(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL DINT_TO_LREAL(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT DINT_TO_SINT(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT DINT_TO_INT(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT DINT_TO_DINT(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT DINT_TO_LINT(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT DINT_TO_USINT(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT DINT_TO_UINT(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT DINT_TO_UDINT(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT DINT_TO_ULINT(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline REAL LINT_TO_REAL(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL LINT_TO_LREAL(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT LINT_TO_SINT(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT LINT_TO_INT(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT LINT_TO_DINT(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT LINT_TO_LINT(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT LINT_TO_USINT(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT LINT_TO_UINT(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT LINT_TO_UDINT(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT LINT_TO_ULINT(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline REAL USINT_TO_REAL(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL USINT_TO_LREAL(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT USINT_TO_SINT(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT USINT_TO_INT(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT USINT_TO_DINT(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT USINT_TO_LINT(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT USINT_TO_USINT(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT USINT_TO_UINT(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT USINT_TO_UDINT(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT USINT_TO_ULINT(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline REAL UINT_TO_REAL(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL UINT_TO_LREAL(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT UINT_TO_SINT(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT UINT_TO_INT(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT UINT_TO_DINT(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT UINT_TO_LINT(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT UINT_TO_USINT(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT UINT_TO_UINT(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT UINT_TO_UDINT(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT UINT_TO_ULINT(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline REAL UDINT_TO_REAL(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL UDINT_TO_LREAL(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT UDINT_TO_SINT(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT UDINT_TO_INT(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT UDINT_TO_DINT(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT UDINT_TO_LINT(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT UDINT_TO_USINT(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT UDINT_TO_UINT(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT UDINT_TO_UDINT(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT UDINT_TO_ULINT(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline REAL ULINT_TO_REAL(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL ULINT_TO_LREAL(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline SINT ULINT_TO_SINT(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT ULINT_TO_INT(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT ULINT_TO_DINT(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT ULINT_TO_LINT(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT ULINT_TO_USINT(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT ULINT_TO_UINT(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT ULINT_TO_UDINT(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT ULINT_TO_ULINT(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);}
static inline BYTE SINT_TO_BYTE(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD SINT_TO_WORD(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD SINT_TO_DWORD(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD SINT_TO_LWORD(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);} static inline BYTE INT_TO_BYTE(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD INT_TO_WORD(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD INT_TO_DWORD(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD INT_TO_LWORD(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);} static inline BYTE DINT_TO_BYTE(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD DINT_TO_WORD(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD DINT_TO_DWORD(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD DINT_TO_LWORD(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);} static inline BYTE LINT_TO_BYTE(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD LINT_TO_WORD(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD LINT_TO_DWORD(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD LINT_TO_LWORD(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);} static inline BYTE USINT_TO_BYTE(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD USINT_TO_WORD(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD USINT_TO_DWORD(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD USINT_TO_LWORD(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);} static inline BYTE UINT_TO_BYTE(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD UINT_TO_WORD(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD UINT_TO_DWORD(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD UINT_TO_LWORD(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);} static inline BYTE UDINT_TO_BYTE(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD UDINT_TO_WORD(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD UDINT_TO_DWORD(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD UDINT_TO_LWORD(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);} static inline BYTE ULINT_TO_BYTE(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__move_BYTE(op);} static inline WORD ULINT_TO_WORD(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__move_WORD(op);} static inline DWORD ULINT_TO_DWORD(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__move_DWORD(op);} static inline LWORD ULINT_TO_LWORD(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__move_LWORD(op);}




static inline BYTE REAL_TO_BYTE(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__real_to_bit(op);} static inline WORD REAL_TO_WORD(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__real_to_bit(op);} static inline DWORD REAL_TO_DWORD(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__real_to_bit(op);} static inline LWORD REAL_TO_LWORD(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__real_to_bit(op);} static inline BYTE LREAL_TO_BYTE(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__real_to_bit(op);} static inline WORD LREAL_TO_WORD(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__real_to_bit(op);} static inline DWORD LREAL_TO_DWORD(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__real_to_bit(op);} static inline LWORD LREAL_TO_LWORD(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__real_to_bit(op);}




static inline SINT REAL_TO_SINT(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__real_to_sint(op);} static inline INT REAL_TO_INT(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__real_to_sint(op);} static inline DINT REAL_TO_DINT(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__real_to_sint(op);} static inline LINT REAL_TO_LINT(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__real_to_sint(op);} static inline SINT LREAL_TO_SINT(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__real_to_sint(op);} static inline INT LREAL_TO_INT(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__real_to_sint(op);} static inline DINT LREAL_TO_DINT(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__real_to_sint(op);} static inline LINT LREAL_TO_LINT(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__real_to_sint(op);}


static inline USINT REAL_TO_USINT(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__real_to_uint(op);} static inline UINT REAL_TO_UINT(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__real_to_uint(op);} static inline UDINT REAL_TO_UDINT(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__real_to_uint(op);} static inline ULINT REAL_TO_ULINT(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__real_to_uint(op);} static inline USINT LREAL_TO_USINT(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__real_to_uint(op);} static inline UINT LREAL_TO_UINT(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__real_to_uint(op);} static inline UDINT LREAL_TO_UDINT(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__real_to_uint(op);} static inline ULINT LREAL_TO_ULINT(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__real_to_uint(op);}




static inline REAL REAL_TO_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL REAL_TO_LREAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);} static inline REAL LREAL_TO_REAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__move_REAL(op);} static inline LREAL LREAL_TO_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__move_LREAL(op);}




static inline TIME BYTE_TO_TIME(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);} static inline TIME WORD_TO_TIME(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);} static inline TIME DWORD_TO_TIME(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);} static inline TIME LWORD_TO_TIME(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);} static inline TIME BOOL_TO_TIME(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);}
static inline TIME SINT_TO_TIME(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);} static inline TIME INT_TO_TIME(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);} static inline TIME DINT_TO_TIME(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);} static inline TIME LINT_TO_TIME(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);} static inline TIME USINT_TO_TIME(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);} static inline TIME UINT_TO_TIME(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);} static inline TIME UDINT_TO_TIME(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);} static inline TIME ULINT_TO_TIME(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__int_to_time(op);}


static inline DATE BYTE_TO_DATE(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD BYTE_TO_TOD(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT BYTE_TO_DT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);} static inline DATE WORD_TO_DATE(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD WORD_TO_TOD(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT WORD_TO_DT(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);} static inline DATE DWORD_TO_DATE(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD DWORD_TO_TOD(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT DWORD_TO_DT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);} static inline DATE LWORD_TO_DATE(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD LWORD_TO_TOD(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT LWORD_TO_DT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);} static inline DATE BOOL_TO_DATE(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD BOOL_TO_TOD(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT BOOL_TO_DT(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);}
static inline DATE SINT_TO_DATE(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD SINT_TO_TOD(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT SINT_TO_DT(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);} static inline DATE INT_TO_DATE(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD INT_TO_TOD(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT INT_TO_DT(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);} static inline DATE DINT_TO_DATE(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD DINT_TO_TOD(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT DINT_TO_DT(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);} static inline DATE LINT_TO_DATE(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD LINT_TO_TOD(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT LINT_TO_DT(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);} static inline DATE USINT_TO_DATE(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD USINT_TO_TOD(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT USINT_TO_DT(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);} static inline DATE UINT_TO_DATE(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD UINT_TO_TOD(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT UINT_TO_DT(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);} static inline DATE UDINT_TO_DATE(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD UDINT_TO_TOD(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT UDINT_TO_DT(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);} static inline DATE ULINT_TO_DATE(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__int_to_time(op);} static inline TOD ULINT_TO_TOD(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__int_to_time(op);} static inline DT ULINT_TO_DT(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__int_to_time(op);}




static inline TIME REAL_TO_TIME(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__real_to_time(op);} static inline TIME LREAL_TO_TIME(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__real_to_time(op);}


static inline DATE REAL_TO_DATE(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__real_to_time(op);} static inline TOD REAL_TO_TOD(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__real_to_time(op);} static inline DT REAL_TO_DT(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__real_to_time(op);} static inline DATE LREAL_TO_DATE(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__real_to_time(op);} static inline TOD LREAL_TO_TOD(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__real_to_time(op);} static inline DT LREAL_TO_DT(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__real_to_time(op);}




static inline SINT TIME_TO_SINT(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__time_to_int(op);} static inline INT TIME_TO_INT(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__time_to_int(op);} static inline DINT TIME_TO_DINT(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__time_to_int(op);} static inline LINT TIME_TO_LINT(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__time_to_int(op);} static inline USINT TIME_TO_USINT(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__time_to_int(op);} static inline UINT TIME_TO_UINT(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__time_to_int(op);} static inline UDINT TIME_TO_UDINT(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__time_to_int(op);} static inline ULINT TIME_TO_ULINT(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__time_to_int(op);}
static inline BYTE TIME_TO_BYTE(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__time_to_int(op);} static inline WORD TIME_TO_WORD(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__time_to_int(op);} static inline DWORD TIME_TO_DWORD(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__time_to_int(op);} static inline LWORD TIME_TO_LWORD(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__time_to_int(op);}
static inline SINT DATE_TO_SINT(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__time_to_int(op);} static inline INT DATE_TO_INT(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__time_to_int(op);} static inline DINT DATE_TO_DINT(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__time_to_int(op);} static inline LINT DATE_TO_LINT(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__time_to_int(op);} static inline USINT DATE_TO_USINT(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__time_to_int(op);} static inline UINT DATE_TO_UINT(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__time_to_int(op);} static inline UDINT DATE_TO_UDINT(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__time_to_int(op);} static inline ULINT DATE_TO_ULINT(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__time_to_int(op);} static inline SINT TOD_TO_SINT(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__time_to_int(op);} static inline INT TOD_TO_INT(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__time_to_int(op);} static inline DINT TOD_TO_DINT(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__time_to_int(op);} static inline LINT TOD_TO_LINT(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__time_to_int(op);} static inline USINT TOD_TO_USINT(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__time_to_int(op);} static inline UINT TOD_TO_UINT(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__time_to_int(op);} static inline UDINT TOD_TO_UDINT(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__time_to_int(op);} static inline ULINT TOD_TO_ULINT(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__time_to_int(op);} static inline SINT DT_TO_SINT(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__time_to_int(op);} static inline INT DT_TO_INT(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__time_to_int(op);} static inline DINT DT_TO_DINT(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__time_to_int(op);} static inline LINT DT_TO_LINT(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__time_to_int(op);} static inline USINT DT_TO_USINT(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__time_to_int(op);} static inline UINT DT_TO_UINT(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__time_to_int(op);} static inline UDINT DT_TO_UDINT(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__time_to_int(op);} static inline ULINT DT_TO_ULINT(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__time_to_int(op);}
static inline BYTE DATE_TO_BYTE(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__time_to_int(op);} static inline WORD DATE_TO_WORD(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__time_to_int(op);} static inline DWORD DATE_TO_DWORD(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__time_to_int(op);} static inline LWORD DATE_TO_LWORD(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__time_to_int(op);} static inline BYTE TOD_TO_BYTE(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__time_to_int(op);} static inline WORD TOD_TO_WORD(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__time_to_int(op);} static inline DWORD TOD_TO_DWORD(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__time_to_int(op);} static inline LWORD TOD_TO_LWORD(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__time_to_int(op);} static inline BYTE DT_TO_BYTE(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__time_to_int(op);} static inline WORD DT_TO_WORD(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__time_to_int(op);} static inline DWORD DT_TO_DWORD(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__time_to_int(op);} static inline LWORD DT_TO_LWORD(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__time_to_int(op);}




static inline REAL TIME_TO_REAL(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__time_to_real(op);} static inline LREAL TIME_TO_LREAL(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__time_to_real(op);}
static inline REAL DATE_TO_REAL(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__time_to_real(op);} static inline LREAL DATE_TO_LREAL(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__time_to_real(op);} static inline REAL TOD_TO_REAL(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__time_to_real(op);} static inline LREAL TOD_TO_LREAL(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__time_to_real(op);} static inline REAL DT_TO_REAL(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__time_to_real(op);} static inline LREAL DT_TO_LREAL(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__time_to_real(op);}





static inline DATE DT_TO_DATE(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__date_and_time_to_date(op);}
static inline DT DT_TO_DT(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__move_DT(op);}
static inline TOD DT_TO_TOD(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__date_and_time_to_time_of_day(op);}

static inline DATE DATE_TO_DATE(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__move_DATE(op);}





static inline TOD TOD_TO_TOD(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__move_TOD(op);}
# 839 "iec_std_lib.h"
static inline TIME TIME_TO_TIME(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__move_TIME(op);}



static inline STRING BOOL_TO_STRING(BOOL EN, BOOL *ENO, BOOL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__bool_to_string(op);}

static inline STRING BYTE_TO_STRING(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__bit_to_string(op);} static inline STRING WORD_TO_STRING(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__bit_to_string(op);} static inline STRING DWORD_TO_STRING(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__bit_to_string(op);} static inline STRING LWORD_TO_STRING(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__bit_to_string(op);}




static inline STRING SINT_TO_STRING(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__sint_to_string(op);} static inline STRING INT_TO_STRING(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__sint_to_string(op);} static inline STRING DINT_TO_STRING(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__sint_to_string(op);} static inline STRING LINT_TO_STRING(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__sint_to_string(op);}


static inline STRING USINT_TO_STRING(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__uint_to_string(op);} static inline STRING UINT_TO_STRING(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__uint_to_string(op);} static inline STRING UDINT_TO_STRING(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__uint_to_string(op);} static inline STRING ULINT_TO_STRING(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__uint_to_string(op);}




static inline STRING REAL_TO_STRING(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__real_to_string(op);} static inline STRING LREAL_TO_STRING(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__real_to_string(op);}



static inline STRING DATE_TO_STRING(BOOL EN, BOOL *ENO, DATE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__date_to_string(op);}
static inline STRING DT_TO_STRING(BOOL EN, BOOL *ENO, DT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__dt_to_string(op);}
static inline STRING TOD_TO_STRING(BOOL EN, BOOL *ENO, TOD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__tod_to_string(op);}


static inline STRING TIME_TO_STRING(BOOL EN, BOOL *ENO, TIME op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__time_to_string(op);}



static inline BOOL STRING_TO_BOOL(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BOOL)__string_to_bool(op);}

static inline BYTE STRING_TO_BYTE(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__string_to_bit(op);} static inline WORD STRING_TO_WORD(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__string_to_bit(op);} static inline DWORD STRING_TO_DWORD(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__string_to_bit(op);} static inline LWORD STRING_TO_LWORD(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__string_to_bit(op);}




static inline SINT STRING_TO_SINT(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__string_to_sint(op);} static inline INT STRING_TO_INT(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__string_to_sint(op);} static inline DINT STRING_TO_DINT(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__string_to_sint(op);} static inline LINT STRING_TO_LINT(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__string_to_sint(op);}


static inline USINT STRING_TO_USINT(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__string_to_uint(op);} static inline UINT STRING_TO_UINT(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__string_to_uint(op);} static inline UDINT STRING_TO_UDINT(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__string_to_uint(op);} static inline ULINT STRING_TO_ULINT(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__string_to_uint(op);}




static inline REAL STRING_TO_REAL(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (REAL)__string_to_real(op);} static inline LREAL STRING_TO_LREAL(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LREAL)__string_to_real(op);}




static inline DATE STRING_TO_DATE(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DATE)__string_to_time(op);} static inline TOD STRING_TO_TOD(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TOD)__string_to_time(op);} static inline DT STRING_TO_DT(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DT)__string_to_time(op);}



static inline TIME STRING_TO_TIME(BOOL EN, BOOL *ENO, STRING op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (TIME)__string_to_time(op);}
# 904 "iec_std_lib.h"
static inline SINT TRUNC__SINT__REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT TRUNC__INT__REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT TRUNC__DINT__REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT TRUNC__LINT__REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT TRUNC__USINT__REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT TRUNC__UINT__REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT TRUNC__UDINT__REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT TRUNC__ULINT__REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);} static inline SINT TRUNC__SINT__LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__move_SINT(op);} static inline INT TRUNC__INT__LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__move_INT(op);} static inline DINT TRUNC__DINT__LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__move_DINT(op);} static inline LINT TRUNC__LINT__LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__move_LINT(op);} static inline USINT TRUNC__USINT__LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__move_USINT(op);} static inline UINT TRUNC__UINT__LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__move_UINT(op);} static inline UDINT TRUNC__UDINT__LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__move_UDINT(op);} static inline ULINT TRUNC__ULINT__LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__move_ULINT(op);}
# 914 "iec_std_lib.h"
static inline BYTE USINT_TO_BCD_BYTE(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__uint_to_bcd(op);} static inline WORD USINT_TO_BCD_WORD(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__uint_to_bcd(op);} static inline DWORD USINT_TO_BCD_DWORD(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__uint_to_bcd(op);} static inline LWORD USINT_TO_BCD_LWORD(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__uint_to_bcd(op);} static inline BYTE UINT_TO_BCD_BYTE(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__uint_to_bcd(op);} static inline WORD UINT_TO_BCD_WORD(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__uint_to_bcd(op);} static inline DWORD UINT_TO_BCD_DWORD(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__uint_to_bcd(op);} static inline LWORD UINT_TO_BCD_LWORD(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__uint_to_bcd(op);} static inline BYTE UDINT_TO_BCD_BYTE(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__uint_to_bcd(op);} static inline WORD UDINT_TO_BCD_WORD(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__uint_to_bcd(op);} static inline DWORD UDINT_TO_BCD_DWORD(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__uint_to_bcd(op);} static inline LWORD UDINT_TO_BCD_LWORD(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__uint_to_bcd(op);} static inline BYTE ULINT_TO_BCD_BYTE(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (BYTE)__uint_to_bcd(op);} static inline WORD ULINT_TO_BCD_WORD(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (WORD)__uint_to_bcd(op);} static inline DWORD ULINT_TO_BCD_DWORD(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DWORD)__uint_to_bcd(op);} static inline LWORD ULINT_TO_BCD_LWORD(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LWORD)__uint_to_bcd(op);}
# 924 "iec_std_lib.h"
static inline USINT BYTE_BCD_TO_USINT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__bcd_to_uint(op);} static inline UINT BYTE_BCD_TO_UINT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__bcd_to_uint(op);} static inline UDINT BYTE_BCD_TO_UDINT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__bcd_to_uint(op);} static inline ULINT BYTE_BCD_TO_ULINT(BOOL EN, BOOL *ENO, BYTE op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__bcd_to_uint(op);} static inline USINT WORD_BCD_TO_USINT(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__bcd_to_uint(op);} static inline UINT WORD_BCD_TO_UINT(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__bcd_to_uint(op);} static inline UDINT WORD_BCD_TO_UDINT(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__bcd_to_uint(op);} static inline ULINT WORD_BCD_TO_ULINT(BOOL EN, BOOL *ENO, WORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__bcd_to_uint(op);} static inline USINT DWORD_BCD_TO_USINT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__bcd_to_uint(op);} static inline UINT DWORD_BCD_TO_UINT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__bcd_to_uint(op);} static inline UDINT DWORD_BCD_TO_UDINT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__bcd_to_uint(op);} static inline ULINT DWORD_BCD_TO_ULINT(BOOL EN, BOOL *ENO, DWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__bcd_to_uint(op);} static inline USINT LWORD_BCD_TO_USINT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__bcd_to_uint(op);} static inline UINT LWORD_BCD_TO_UINT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__bcd_to_uint(op);} static inline UDINT LWORD_BCD_TO_UDINT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__bcd_to_uint(op);} static inline ULINT LWORD_BCD_TO_ULINT(BOOL EN, BOOL *ENO, LWORD op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__bcd_to_uint(op);}
# 1000 "iec_std_lib.h"
static inline REAL ABS_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op < 0) return -op; return op;} static inline REAL ABS__REAL__REAL(BOOL EN, BOOL *ENO, REAL op) { return ABS_REAL(EN, ENO, op);} static inline LREAL ABS_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op < 0) return -op; return op;} static inline LREAL ABS__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op) { return ABS_LREAL(EN, ENO, op);}
static inline SINT ABS_SINT(BOOL EN, BOOL *ENO, SINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op < 0) return -op; return op;} static inline SINT ABS__SINT__SINT(BOOL EN, BOOL *ENO, SINT op) { return ABS_SINT(EN, ENO, op);} static inline INT ABS_INT(BOOL EN, BOOL *ENO, INT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op < 0) return -op; return op;} static inline INT ABS__INT__INT(BOOL EN, BOOL *ENO, INT op) { return ABS_INT(EN, ENO, op);} static inline DINT ABS_DINT(BOOL EN, BOOL *ENO, DINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op < 0) return -op; return op;} static inline DINT ABS__DINT__DINT(BOOL EN, BOOL *ENO, DINT op) { return ABS_DINT(EN, ENO, op);} static inline LINT ABS_LINT(BOOL EN, BOOL *ENO, LINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op < 0) return -op; return op;} static inline LINT ABS__LINT__LINT(BOOL EN, BOOL *ENO, LINT op) { return ABS_LINT(EN, ENO, op);}
static inline USINT ABS_USINT(BOOL EN, BOOL *ENO, USINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op;} static inline USINT ABS__USINT__USINT(BOOL EN, BOOL *ENO, USINT op) { return ABS_USINT(EN, ENO, op);} static inline UINT ABS_UINT(BOOL EN, BOOL *ENO, UINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op;} static inline UINT ABS__UINT__UINT(BOOL EN, BOOL *ENO, UINT op) { return ABS_UINT(EN, ENO, op);} static inline UDINT ABS_UDINT(BOOL EN, BOOL *ENO, UDINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op;} static inline UDINT ABS__UDINT__UDINT(BOOL EN, BOOL *ENO, UDINT op) { return ABS_UDINT(EN, ENO, op);} static inline ULINT ABS_ULINT(BOOL EN, BOOL *ENO, ULINT op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op;} static inline ULINT ABS__ULINT__ULINT(BOOL EN, BOOL *ENO, ULINT op) { return ABS_ULINT(EN, ENO, op);}






static inline REAL SQRT_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return sqrt(op);} static inline REAL SQRT__REAL__REAL(BOOL EN, BOOL *ENO, REAL op) { return SQRT_REAL(EN, ENO, op);} static inline LREAL SQRT_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return sqrt(op);} static inline LREAL SQRT__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op) { return SQRT_LREAL(EN, ENO, op);}






static inline REAL LN_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return log(op);} static inline REAL LN__REAL__REAL(BOOL EN, BOOL *ENO, REAL op) { return LN_REAL(EN, ENO, op);} static inline LREAL LN_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return log(op);} static inline LREAL LN__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op) { return LN_LREAL(EN, ENO, op);}






static inline REAL LOG_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return log10(op);} static inline REAL LOG__REAL__REAL(BOOL EN, BOOL *ENO, REAL op) { return LOG_REAL(EN, ENO, op);} static inline LREAL LOG_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return log10(op);} static inline LREAL LOG__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op) { return LOG_LREAL(EN, ENO, op);}






static inline REAL EXP_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return exp(op);} static inline REAL EXP__REAL__REAL(BOOL EN, BOOL *ENO, REAL op) { return EXP_REAL(EN, ENO, op);} static inline LREAL EXP_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return exp(op);} static inline LREAL EXP__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op) { return EXP_LREAL(EN, ENO, op);}






static inline REAL SIN_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return sin(op);} static inline REAL SIN__REAL__REAL(BOOL EN, BOOL *ENO, REAL op) { return SIN_REAL(EN, ENO, op);} static inline LREAL SIN_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return sin(op);} static inline LREAL SIN__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op) { return SIN_LREAL(EN, ENO, op);}






static inline REAL COS_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return cos(op);} static inline REAL COS__REAL__REAL(BOOL EN, BOOL *ENO, REAL op) { return COS_REAL(EN, ENO, op);} static inline LREAL COS_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return cos(op);} static inline LREAL COS__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op) { return COS_LREAL(EN, ENO, op);}





static inline REAL TAN_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return tan(op);} static inline REAL TAN__REAL__REAL(BOOL EN, BOOL *ENO, REAL op) { return TAN_REAL(EN, ENO, op);} static inline LREAL TAN_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return tan(op);} static inline LREAL TAN__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op) { return TAN_LREAL(EN, ENO, op);}






static inline REAL ASIN_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return asin(op);} static inline REAL ASIN__REAL__REAL(BOOL EN, BOOL *ENO, REAL op) { return ASIN_REAL(EN, ENO, op);} static inline LREAL ASIN_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return asin(op);} static inline LREAL ASIN__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op) { return ASIN_LREAL(EN, ENO, op);}





static inline REAL ACOS_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return acos(op);} static inline REAL ACOS__REAL__REAL(BOOL EN, BOOL *ENO, REAL op) { return ACOS_REAL(EN, ENO, op);} static inline LREAL ACOS_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return acos(op);} static inline LREAL ACOS__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op) { return ACOS_LREAL(EN, ENO, op);}





static inline REAL ATAN_REAL(BOOL EN, BOOL *ENO, REAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return atan(op);} static inline REAL ATAN__REAL__REAL(BOOL EN, BOOL *ENO, REAL op) { return ATAN_REAL(EN, ENO, op);} static inline LREAL ATAN_LREAL(BOOL EN, BOOL *ENO, LREAL op){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return atan(op);} static inline LREAL ATAN__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op) { return ATAN_LREAL(EN, ENO, op);}
# 1110 "iec_std_lib.h"
static inline REAL ADD_REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,LREAL); } __builtin_va_end(ap); return op1;} static inline REAL ADD__REAL__REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,LREAL); } __builtin_va_end(ap); return op1;} static inline LREAL ADD_LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,LREAL); } __builtin_va_end(ap); return op1;} static inline LREAL ADD__LREAL__LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,LREAL); } __builtin_va_end(ap); return op1;} static inline SINT ADD_SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline SINT ADD__SINT__SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline INT ADD_INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline INT ADD__INT__INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline DINT ADD_DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline DINT ADD__DINT__DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline LINT ADD_LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,LINT); } __builtin_va_end(ap); return op1;} static inline LINT ADD__LINT__LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,LINT); } __builtin_va_end(ap); return op1;} static inline USINT ADD_USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline USINT ADD__USINT__USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline UINT ADD_UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline UINT ADD__UINT__UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline UDINT ADD_UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline UDINT ADD__UDINT__UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline ULINT ADD_ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,ULINT); } __builtin_va_end(ap); return op1;} static inline ULINT ADD__ULINT__ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 + __builtin_va_arg(ap,ULINT); } __builtin_va_end(ap); return op1;}
# 1119 "iec_std_lib.h"
static inline REAL MUL_REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,LREAL); } __builtin_va_end(ap); return op1;} static inline REAL MUL__REAL__REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,LREAL); } __builtin_va_end(ap); return op1;} static inline LREAL MUL_LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,LREAL); } __builtin_va_end(ap); return op1;} static inline LREAL MUL__LREAL__LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,LREAL); } __builtin_va_end(ap); return op1;} static inline SINT MUL_SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline SINT MUL__SINT__SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline INT MUL_INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline INT MUL__INT__INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline DINT MUL_DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline DINT MUL__DINT__DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,DINT); } __builtin_va_end(ap); return op1;} static inline LINT MUL_LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,LINT); } __builtin_va_end(ap); return op1;} static inline LINT MUL__LINT__LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,LINT); } __builtin_va_end(ap); return op1;} static inline USINT MUL_USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline USINT MUL__USINT__USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline UINT MUL_UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline UINT MUL__UINT__UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline UDINT MUL_UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline UDINT MUL__UDINT__UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,UDINT); } __builtin_va_end(ap); return op1;} static inline ULINT MUL_ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,ULINT); } __builtin_va_end(ap); return op1;} static inline ULINT MUL__ULINT__ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 * __builtin_va_arg(ap,ULINT); } __builtin_va_end(ap); return op1;}






static inline REAL SUB_REAL(BOOL EN, BOOL *ENO, REAL op1, REAL op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 - op2;} static inline REAL SUB__REAL__REAL__REAL(BOOL EN, BOOL *ENO, REAL op1, REAL op2){ return SUB_REAL(EN, ENO, op1, op2);} static inline LREAL SUB_LREAL(BOOL EN, BOOL *ENO, LREAL op1, LREAL op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 - op2;} static inline LREAL SUB__LREAL__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op1, LREAL op2){ return SUB_LREAL(EN, ENO, op1, op2);} static inline SINT SUB_SINT(BOOL EN, BOOL *ENO, SINT op1, SINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 - op2;} static inline SINT SUB__SINT__SINT__SINT(BOOL EN, BOOL *ENO, SINT op1, SINT op2){ return SUB_SINT(EN, ENO, op1, op2);} static inline INT SUB_INT(BOOL EN, BOOL *ENO, INT op1, INT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 - op2;} static inline INT SUB__INT__INT__INT(BOOL EN, BOOL *ENO, INT op1, INT op2){ return SUB_INT(EN, ENO, op1, op2);} static inline DINT SUB_DINT(BOOL EN, BOOL *ENO, DINT op1, DINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 - op2;} static inline DINT SUB__DINT__DINT__DINT(BOOL EN, BOOL *ENO, DINT op1, DINT op2){ return SUB_DINT(EN, ENO, op1, op2);} static inline LINT SUB_LINT(BOOL EN, BOOL *ENO, LINT op1, LINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 - op2;} static inline LINT SUB__LINT__LINT__LINT(BOOL EN, BOOL *ENO, LINT op1, LINT op2){ return SUB_LINT(EN, ENO, op1, op2);} static inline USINT SUB_USINT(BOOL EN, BOOL *ENO, USINT op1, USINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 - op2;} static inline USINT SUB__USINT__USINT__USINT(BOOL EN, BOOL *ENO, USINT op1, USINT op2){ return SUB_USINT(EN, ENO, op1, op2);} static inline UINT SUB_UINT(BOOL EN, BOOL *ENO, UINT op1, UINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 - op2;} static inline UINT SUB__UINT__UINT__UINT(BOOL EN, BOOL *ENO, UINT op1, UINT op2){ return SUB_UINT(EN, ENO, op1, op2);} static inline UDINT SUB_UDINT(BOOL EN, BOOL *ENO, UDINT op1, UDINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 - op2;} static inline UDINT SUB__UDINT__UDINT__UDINT(BOOL EN, BOOL *ENO, UDINT op1, UDINT op2){ return SUB_UDINT(EN, ENO, op1, op2);} static inline ULINT SUB_ULINT(BOOL EN, BOOL *ENO, ULINT op1, ULINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 - op2;} static inline ULINT SUB__ULINT__ULINT__ULINT(BOOL EN, BOOL *ENO, ULINT op1, ULINT op2){ return SUB_ULINT(EN, ENO, op1, op2);}
# 1142 "iec_std_lib.h"
static inline REAL DIV_REAL(BOOL EN, BOOL *ENO, REAL op1, REAL op2){ if (!EN || (op2 == 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 / op2;} static inline REAL DIV__REAL__REAL__REAL(BOOL EN, BOOL *ENO, REAL op1, REAL op2){ return DIV_REAL(EN, ENO, op1, op2);} static inline LREAL DIV_LREAL(BOOL EN, BOOL *ENO, LREAL op1, LREAL op2){ if (!EN || (op2 == 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 / op2;} static inline LREAL DIV__LREAL__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op1, LREAL op2){ return DIV_LREAL(EN, ENO, op1, op2);} static inline SINT DIV_SINT(BOOL EN, BOOL *ENO, SINT op1, SINT op2){ if (!EN || (op2 == 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 / op2;} static inline SINT DIV__SINT__SINT__SINT(BOOL EN, BOOL *ENO, SINT op1, SINT op2){ return DIV_SINT(EN, ENO, op1, op2);} static inline INT DIV_INT(BOOL EN, BOOL *ENO, INT op1, INT op2){ if (!EN || (op2 == 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 / op2;} static inline INT DIV__INT__INT__INT(BOOL EN, BOOL *ENO, INT op1, INT op2){ return DIV_INT(EN, ENO, op1, op2);} static inline DINT DIV_DINT(BOOL EN, BOOL *ENO, DINT op1, DINT op2){ if (!EN || (op2 == 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 / op2;} static inline DINT DIV__DINT__DINT__DINT(BOOL EN, BOOL *ENO, DINT op1, DINT op2){ return DIV_DINT(EN, ENO, op1, op2);} static inline LINT DIV_LINT(BOOL EN, BOOL *ENO, LINT op1, LINT op2){ if (!EN || (op2 == 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 / op2;} static inline LINT DIV__LINT__LINT__LINT(BOOL EN, BOOL *ENO, LINT op1, LINT op2){ return DIV_LINT(EN, ENO, op1, op2);} static inline USINT DIV_USINT(BOOL EN, BOOL *ENO, USINT op1, USINT op2){ if (!EN || (op2 == 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 / op2;} static inline USINT DIV__USINT__USINT__USINT(BOOL EN, BOOL *ENO, USINT op1, USINT op2){ return DIV_USINT(EN, ENO, op1, op2);} static inline UINT DIV_UINT(BOOL EN, BOOL *ENO, UINT op1, UINT op2){ if (!EN || (op2 == 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 / op2;} static inline UINT DIV__UINT__UINT__UINT(BOOL EN, BOOL *ENO, UINT op1, UINT op2){ return DIV_UINT(EN, ENO, op1, op2);} static inline UDINT DIV_UDINT(BOOL EN, BOOL *ENO, UDINT op1, UDINT op2){ if (!EN || (op2 == 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 / op2;} static inline UDINT DIV__UDINT__UDINT__UDINT(BOOL EN, BOOL *ENO, UDINT op1, UDINT op2){ return DIV_UDINT(EN, ENO, op1, op2);} static inline ULINT DIV_ULINT(BOOL EN, BOOL *ENO, ULINT op1, ULINT op2){ if (!EN || (op2 == 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 / op2;} static inline ULINT DIV__ULINT__ULINT__ULINT(BOOL EN, BOOL *ENO, ULINT op1, ULINT op2){ return DIV_ULINT(EN, ENO, op1, op2);}
# 1159 "iec_std_lib.h"
static inline SINT MOD_SINT(BOOL EN, BOOL *ENO, SINT op1, SINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op2 == 0) return 0; return op1 % op2;} static inline SINT MOD__SINT__SINT__SINT(BOOL EN, BOOL *ENO, SINT op1, SINT op2){ return MOD_SINT(EN, ENO, op1, op2);} static inline INT MOD_INT(BOOL EN, BOOL *ENO, INT op1, INT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op2 == 0) return 0; return op1 % op2;} static inline INT MOD__INT__INT__INT(BOOL EN, BOOL *ENO, INT op1, INT op2){ return MOD_INT(EN, ENO, op1, op2);} static inline DINT MOD_DINT(BOOL EN, BOOL *ENO, DINT op1, DINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op2 == 0) return 0; return op1 % op2;} static inline DINT MOD__DINT__DINT__DINT(BOOL EN, BOOL *ENO, DINT op1, DINT op2){ return MOD_DINT(EN, ENO, op1, op2);} static inline LINT MOD_LINT(BOOL EN, BOOL *ENO, LINT op1, LINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op2 == 0) return 0; return op1 % op2;} static inline LINT MOD__LINT__LINT__LINT(BOOL EN, BOOL *ENO, LINT op1, LINT op2){ return MOD_LINT(EN, ENO, op1, op2);} static inline USINT MOD_USINT(BOOL EN, BOOL *ENO, USINT op1, USINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op2 == 0) return 0; return op1 % op2;} static inline USINT MOD__USINT__USINT__USINT(BOOL EN, BOOL *ENO, USINT op1, USINT op2){ return MOD_USINT(EN, ENO, op1, op2);} static inline UINT MOD_UINT(BOOL EN, BOOL *ENO, UINT op1, UINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op2 == 0) return 0; return op1 % op2;} static inline UINT MOD__UINT__UINT__UINT(BOOL EN, BOOL *ENO, UINT op1, UINT op2){ return MOD_UINT(EN, ENO, op1, op2);} static inline UDINT MOD_UDINT(BOOL EN, BOOL *ENO, UDINT op1, UDINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op2 == 0) return 0; return op1 % op2;} static inline UDINT MOD__UDINT__UDINT__UDINT(BOOL EN, BOOL *ENO, UDINT op1, UDINT op2){ return MOD_UDINT(EN, ENO, op1, op2);} static inline ULINT MOD_ULINT(BOOL EN, BOOL *ENO, ULINT op1, ULINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; if (op2 == 0) return 0; return op1 % op2;} static inline ULINT MOD__ULINT__ULINT__ULINT(BOOL EN, BOOL *ENO, ULINT op1, ULINT op2){ return MOD_ULINT(EN, ENO, op1, op2);}
# 1172 "iec_std_lib.h"
static inline REAL EXPT__REAL__REAL__REAL (BOOL EN, BOOL *ENO, REAL IN1, REAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline LREAL EXPT__LREAL__LREAL__REAL (BOOL EN, BOOL *ENO, LREAL IN1, REAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline REAL EXPT__REAL__REAL__LREAL (BOOL EN, BOOL *ENO, REAL IN1, LREAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline LREAL EXPT__LREAL__LREAL__LREAL (BOOL EN, BOOL *ENO, LREAL IN1, LREAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline REAL EXPT__REAL__REAL__SINT (BOOL EN, BOOL *ENO, REAL IN1, SINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline LREAL EXPT__LREAL__LREAL__SINT (BOOL EN, BOOL *ENO, LREAL IN1, SINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline REAL EXPT__REAL__REAL__INT (BOOL EN, BOOL *ENO, REAL IN1, INT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline LREAL EXPT__LREAL__LREAL__INT (BOOL EN, BOOL *ENO, LREAL IN1, INT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline REAL EXPT__REAL__REAL__DINT (BOOL EN, BOOL *ENO, REAL IN1, DINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline LREAL EXPT__LREAL__LREAL__DINT (BOOL EN, BOOL *ENO, LREAL IN1, DINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline REAL EXPT__REAL__REAL__LINT (BOOL EN, BOOL *ENO, REAL IN1, LINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline LREAL EXPT__LREAL__LREAL__LINT (BOOL EN, BOOL *ENO, LREAL IN1, LINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline REAL EXPT__REAL__REAL__USINT (BOOL EN, BOOL *ENO, REAL IN1, USINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline LREAL EXPT__LREAL__LREAL__USINT (BOOL EN, BOOL *ENO, LREAL IN1, USINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline REAL EXPT__REAL__REAL__UINT (BOOL EN, BOOL *ENO, REAL IN1, UINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline LREAL EXPT__LREAL__LREAL__UINT (BOOL EN, BOOL *ENO, LREAL IN1, UINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline REAL EXPT__REAL__REAL__UDINT (BOOL EN, BOOL *ENO, REAL IN1, UDINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline LREAL EXPT__LREAL__LREAL__UDINT (BOOL EN, BOOL *ENO, LREAL IN1, UDINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline REAL EXPT__REAL__REAL__ULINT (BOOL EN, BOOL *ENO, REAL IN1, ULINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);} static inline LREAL EXPT__LREAL__LREAL__ULINT (BOOL EN, BOOL *ENO, LREAL IN1, ULINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return pow(IN1, IN2);}
# 1186 "iec_std_lib.h"
 static inline REAL MOVE_REAL(BOOL EN, BOOL *ENO, REAL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline LREAL MOVE_LREAL(BOOL EN, BOOL *ENO, LREAL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline SINT MOVE_SINT(BOOL EN, BOOL *ENO, SINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline INT MOVE_INT(BOOL EN, BOOL *ENO, INT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline DINT MOVE_DINT(BOOL EN, BOOL *ENO, DINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline LINT MOVE_LINT(BOOL EN, BOOL *ENO, LINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline USINT MOVE_USINT(BOOL EN, BOOL *ENO, USINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline UINT MOVE_UINT(BOOL EN, BOOL *ENO, UINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline UDINT MOVE_UDINT(BOOL EN, BOOL *ENO, UDINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline ULINT MOVE_ULINT(BOOL EN, BOOL *ENO, ULINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline TIME MOVE_TIME(BOOL EN, BOOL *ENO, TIME op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline BYTE MOVE_BYTE(BOOL EN, BOOL *ENO, BYTE op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline WORD MOVE_WORD(BOOL EN, BOOL *ENO, WORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline DWORD MOVE_DWORD(BOOL EN, BOOL *ENO, DWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline LWORD MOVE_LWORD(BOOL EN, BOOL *ENO, LWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline BOOL MOVE_BOOL(BOOL EN, BOOL *ENO, BOOL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline STRING MOVE_STRING(BOOL EN, BOOL *ENO, STRING op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline DATE MOVE_DATE(BOOL EN, BOOL *ENO, DATE op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline TOD MOVE_TOD(BOOL EN, BOOL *ENO, TOD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline DT MOVE_DT(BOOL EN, BOOL *ENO, DT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;}
# 1195 "iec_std_lib.h"
 static inline REAL MOVE__REAL__REAL(BOOL EN, BOOL *ENO, REAL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline LREAL MOVE__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline SINT MOVE__SINT__SINT(BOOL EN, BOOL *ENO, SINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline INT MOVE__INT__INT(BOOL EN, BOOL *ENO, INT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline DINT MOVE__DINT__DINT(BOOL EN, BOOL *ENO, DINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline LINT MOVE__LINT__LINT(BOOL EN, BOOL *ENO, LINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline USINT MOVE__USINT__USINT(BOOL EN, BOOL *ENO, USINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline UINT MOVE__UINT__UINT(BOOL EN, BOOL *ENO, UINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline UDINT MOVE__UDINT__UDINT(BOOL EN, BOOL *ENO, UDINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline ULINT MOVE__ULINT__ULINT(BOOL EN, BOOL *ENO, ULINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline TIME MOVE__TIME__TIME(BOOL EN, BOOL *ENO, TIME op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline BYTE MOVE__BYTE__BYTE(BOOL EN, BOOL *ENO, BYTE op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline WORD MOVE__WORD__WORD(BOOL EN, BOOL *ENO, WORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline DWORD MOVE__DWORD__DWORD(BOOL EN, BOOL *ENO, DWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline LWORD MOVE__LWORD__LWORD(BOOL EN, BOOL *ENO, LWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline BOOL MOVE__BOOL__BOOL(BOOL EN, BOOL *ENO, BOOL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline STRING MOVE__STRING__STRING(BOOL EN, BOOL *ENO, STRING op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline DATE MOVE__DATE__DATE(BOOL EN, BOOL *ENO, DATE op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline TOD MOVE__TOD__TOD(BOOL EN, BOOL *ENO, TOD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;} static inline DT MOVE__DT__DT(BOOL EN, BOOL *ENO, DT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1;}
# 1233 "iec_std_lib.h"
static inline BOOL SHL__BOOL__SINT(BOOL EN, BOOL *ENO, BOOL IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHL__BOOL__INT(BOOL EN, BOOL *ENO, BOOL IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHL__BOOL__DINT(BOOL EN, BOOL *ENO, BOOL IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHL__BOOL__LINT(BOOL EN, BOOL *ENO, BOOL IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHL__BOOL__USINT(BOOL EN, BOOL *ENO, BOOL IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHL__BOOL__UINT(BOOL EN, BOOL *ENO, BOOL IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHL__BOOL__UDINT(BOOL EN, BOOL *ENO, BOOL IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHL__BOOL__ULINT(BOOL EN, BOOL *ENO, BOOL IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; }





static inline BYTE SHL__BYTE__BYTE__SINT(BOOL EN, BOOL *ENO, BYTE IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline WORD SHL__WORD__WORD__SINT(BOOL EN, BOOL *ENO, WORD IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline DWORD SHL__DWORD__DWORD__SINT(BOOL EN, BOOL *ENO, DWORD IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline LWORD SHL__LWORD__LWORD__SINT(BOOL EN, BOOL *ENO, LWORD IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline BYTE SHL__BYTE__BYTE__INT(BOOL EN, BOOL *ENO, BYTE IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline WORD SHL__WORD__WORD__INT(BOOL EN, BOOL *ENO, WORD IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline DWORD SHL__DWORD__DWORD__INT(BOOL EN, BOOL *ENO, DWORD IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline LWORD SHL__LWORD__LWORD__INT(BOOL EN, BOOL *ENO, LWORD IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline BYTE SHL__BYTE__BYTE__DINT(BOOL EN, BOOL *ENO, BYTE IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline WORD SHL__WORD__WORD__DINT(BOOL EN, BOOL *ENO, WORD IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline DWORD SHL__DWORD__DWORD__DINT(BOOL EN, BOOL *ENO, DWORD IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline LWORD SHL__LWORD__LWORD__DINT(BOOL EN, BOOL *ENO, LWORD IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline BYTE SHL__BYTE__BYTE__LINT(BOOL EN, BOOL *ENO, BYTE IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline WORD SHL__WORD__WORD__LINT(BOOL EN, BOOL *ENO, WORD IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline DWORD SHL__DWORD__DWORD__LINT(BOOL EN, BOOL *ENO, DWORD IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline LWORD SHL__LWORD__LWORD__LINT(BOOL EN, BOOL *ENO, LWORD IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline BYTE SHL__BYTE__BYTE__USINT(BOOL EN, BOOL *ENO, BYTE IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline WORD SHL__WORD__WORD__USINT(BOOL EN, BOOL *ENO, WORD IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline DWORD SHL__DWORD__DWORD__USINT(BOOL EN, BOOL *ENO, DWORD IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline LWORD SHL__LWORD__LWORD__USINT(BOOL EN, BOOL *ENO, LWORD IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline BYTE SHL__BYTE__BYTE__UINT(BOOL EN, BOOL *ENO, BYTE IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline WORD SHL__WORD__WORD__UINT(BOOL EN, BOOL *ENO, WORD IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline DWORD SHL__DWORD__DWORD__UINT(BOOL EN, BOOL *ENO, DWORD IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline LWORD SHL__LWORD__LWORD__UINT(BOOL EN, BOOL *ENO, LWORD IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline BYTE SHL__BYTE__BYTE__UDINT(BOOL EN, BOOL *ENO, BYTE IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline WORD SHL__WORD__WORD__UDINT(BOOL EN, BOOL *ENO, WORD IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline DWORD SHL__DWORD__DWORD__UDINT(BOOL EN, BOOL *ENO, DWORD IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline LWORD SHL__LWORD__LWORD__UDINT(BOOL EN, BOOL *ENO, LWORD IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline BYTE SHL__BYTE__BYTE__ULINT(BOOL EN, BOOL *ENO, BYTE IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline WORD SHL__WORD__WORD__ULINT(BOOL EN, BOOL *ENO, WORD IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline DWORD SHL__DWORD__DWORD__ULINT(BOOL EN, BOOL *ENO, DWORD IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;} static inline LWORD SHL__LWORD__LWORD__ULINT(BOOL EN, BOOL *ENO, LWORD IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN << N;}
# 1252 "iec_std_lib.h"
static inline BOOL SHR__BOOL__SINT(BOOL EN, BOOL *ENO, BOOL IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHR__BOOL__INT(BOOL EN, BOOL *ENO, BOOL IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHR__BOOL__DINT(BOOL EN, BOOL *ENO, BOOL IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHR__BOOL__LINT(BOOL EN, BOOL *ENO, BOOL IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHR__BOOL__USINT(BOOL EN, BOOL *ENO, BOOL IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHR__BOOL__UINT(BOOL EN, BOOL *ENO, BOOL IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHR__BOOL__UDINT(BOOL EN, BOOL *ENO, BOOL IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; } static inline BOOL SHR__BOOL__ULINT(BOOL EN, BOOL *ENO, BOOL IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return (N==0)? IN : 0; }





static inline BYTE SHR__BYTE__BYTE__SINT(BOOL EN, BOOL *ENO, BYTE IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline WORD SHR__WORD__WORD__SINT(BOOL EN, BOOL *ENO, WORD IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline DWORD SHR__DWORD__DWORD__SINT(BOOL EN, BOOL *ENO, DWORD IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline LWORD SHR__LWORD__LWORD__SINT(BOOL EN, BOOL *ENO, LWORD IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline BYTE SHR__BYTE__BYTE__INT(BOOL EN, BOOL *ENO, BYTE IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline WORD SHR__WORD__WORD__INT(BOOL EN, BOOL *ENO, WORD IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline DWORD SHR__DWORD__DWORD__INT(BOOL EN, BOOL *ENO, DWORD IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline LWORD SHR__LWORD__LWORD__INT(BOOL EN, BOOL *ENO, LWORD IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline BYTE SHR__BYTE__BYTE__DINT(BOOL EN, BOOL *ENO, BYTE IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline WORD SHR__WORD__WORD__DINT(BOOL EN, BOOL *ENO, WORD IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline DWORD SHR__DWORD__DWORD__DINT(BOOL EN, BOOL *ENO, DWORD IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline LWORD SHR__LWORD__LWORD__DINT(BOOL EN, BOOL *ENO, LWORD IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline BYTE SHR__BYTE__BYTE__LINT(BOOL EN, BOOL *ENO, BYTE IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline WORD SHR__WORD__WORD__LINT(BOOL EN, BOOL *ENO, WORD IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline DWORD SHR__DWORD__DWORD__LINT(BOOL EN, BOOL *ENO, DWORD IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline LWORD SHR__LWORD__LWORD__LINT(BOOL EN, BOOL *ENO, LWORD IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline BYTE SHR__BYTE__BYTE__USINT(BOOL EN, BOOL *ENO, BYTE IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline WORD SHR__WORD__WORD__USINT(BOOL EN, BOOL *ENO, WORD IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline DWORD SHR__DWORD__DWORD__USINT(BOOL EN, BOOL *ENO, DWORD IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline LWORD SHR__LWORD__LWORD__USINT(BOOL EN, BOOL *ENO, LWORD IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline BYTE SHR__BYTE__BYTE__UINT(BOOL EN, BOOL *ENO, BYTE IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline WORD SHR__WORD__WORD__UINT(BOOL EN, BOOL *ENO, WORD IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline DWORD SHR__DWORD__DWORD__UINT(BOOL EN, BOOL *ENO, DWORD IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline LWORD SHR__LWORD__LWORD__UINT(BOOL EN, BOOL *ENO, LWORD IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline BYTE SHR__BYTE__BYTE__UDINT(BOOL EN, BOOL *ENO, BYTE IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline WORD SHR__WORD__WORD__UDINT(BOOL EN, BOOL *ENO, WORD IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline DWORD SHR__DWORD__DWORD__UDINT(BOOL EN, BOOL *ENO, DWORD IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline LWORD SHR__LWORD__LWORD__UDINT(BOOL EN, BOOL *ENO, LWORD IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline BYTE SHR__BYTE__BYTE__ULINT(BOOL EN, BOOL *ENO, BYTE IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline WORD SHR__WORD__WORD__ULINT(BOOL EN, BOOL *ENO, WORD IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline DWORD SHR__DWORD__DWORD__ULINT(BOOL EN, BOOL *ENO, DWORD IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;} static inline LWORD SHR__LWORD__LWORD__ULINT(BOOL EN, BOOL *ENO, LWORD IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN >> N;}
# 1271 "iec_std_lib.h"
static inline BOOL ROR__BOOL__SINT(BOOL EN, BOOL *ENO, BOOL IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROR__BOOL__INT(BOOL EN, BOOL *ENO, BOOL IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROR__BOOL__DINT(BOOL EN, BOOL *ENO, BOOL IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROR__BOOL__LINT(BOOL EN, BOOL *ENO, BOOL IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROR__BOOL__USINT(BOOL EN, BOOL *ENO, BOOL IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROR__BOOL__UINT(BOOL EN, BOOL *ENO, BOOL IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROR__BOOL__UDINT(BOOL EN, BOOL *ENO, BOOL IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROR__BOOL__ULINT(BOOL EN, BOOL *ENO, BOOL IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; }
# 1281 "iec_std_lib.h"
static inline BYTE ROR__BYTE__BYTE__SINT(BOOL EN, BOOL *ENO, BYTE IN, SINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN >> N) | (IN << (8*sizeof(BYTE)-N));} static inline WORD ROR__WORD__WORD__SINT(BOOL EN, BOOL *ENO, WORD IN, SINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN >> N) | (IN << (8*sizeof(WORD)-N));} static inline DWORD ROR__DWORD__DWORD__SINT(BOOL EN, BOOL *ENO, DWORD IN, SINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN >> N) | (IN << (8*sizeof(DWORD)-N));} static inline LWORD ROR__LWORD__LWORD__SINT(BOOL EN, BOOL *ENO, LWORD IN, SINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN >> N) | (IN << (8*sizeof(LWORD)-N));} static inline BYTE ROR__BYTE__BYTE__INT(BOOL EN, BOOL *ENO, BYTE IN, INT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN >> N) | (IN << (8*sizeof(BYTE)-N));} static inline WORD ROR__WORD__WORD__INT(BOOL EN, BOOL *ENO, WORD IN, INT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN >> N) | (IN << (8*sizeof(WORD)-N));} static inline DWORD ROR__DWORD__DWORD__INT(BOOL EN, BOOL *ENO, DWORD IN, INT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN >> N) | (IN << (8*sizeof(DWORD)-N));} static inline LWORD ROR__LWORD__LWORD__INT(BOOL EN, BOOL *ENO, LWORD IN, INT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN >> N) | (IN << (8*sizeof(LWORD)-N));} static inline BYTE ROR__BYTE__BYTE__DINT(BOOL EN, BOOL *ENO, BYTE IN, DINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN >> N) | (IN << (8*sizeof(BYTE)-N));} static inline WORD ROR__WORD__WORD__DINT(BOOL EN, BOOL *ENO, WORD IN, DINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN >> N) | (IN << (8*sizeof(WORD)-N));} static inline DWORD ROR__DWORD__DWORD__DINT(BOOL EN, BOOL *ENO, DWORD IN, DINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN >> N) | (IN << (8*sizeof(DWORD)-N));} static inline LWORD ROR__LWORD__LWORD__DINT(BOOL EN, BOOL *ENO, LWORD IN, DINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN >> N) | (IN << (8*sizeof(LWORD)-N));} static inline BYTE ROR__BYTE__BYTE__LINT(BOOL EN, BOOL *ENO, BYTE IN, LINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN >> N) | (IN << (8*sizeof(BYTE)-N));} static inline WORD ROR__WORD__WORD__LINT(BOOL EN, BOOL *ENO, WORD IN, LINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN >> N) | (IN << (8*sizeof(WORD)-N));} static inline DWORD ROR__DWORD__DWORD__LINT(BOOL EN, BOOL *ENO, DWORD IN, LINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN >> N) | (IN << (8*sizeof(DWORD)-N));} static inline LWORD ROR__LWORD__LWORD__LINT(BOOL EN, BOOL *ENO, LWORD IN, LINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN >> N) | (IN << (8*sizeof(LWORD)-N));} static inline BYTE ROR__BYTE__BYTE__USINT(BOOL EN, BOOL *ENO, BYTE IN, USINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN >> N) | (IN << (8*sizeof(BYTE)-N));} static inline WORD ROR__WORD__WORD__USINT(BOOL EN, BOOL *ENO, WORD IN, USINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN >> N) | (IN << (8*sizeof(WORD)-N));} static inline DWORD ROR__DWORD__DWORD__USINT(BOOL EN, BOOL *ENO, DWORD IN, USINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN >> N) | (IN << (8*sizeof(DWORD)-N));} static inline LWORD ROR__LWORD__LWORD__USINT(BOOL EN, BOOL *ENO, LWORD IN, USINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN >> N) | (IN << (8*sizeof(LWORD)-N));} static inline BYTE ROR__BYTE__BYTE__UINT(BOOL EN, BOOL *ENO, BYTE IN, UINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN >> N) | (IN << (8*sizeof(BYTE)-N));} static inline WORD ROR__WORD__WORD__UINT(BOOL EN, BOOL *ENO, WORD IN, UINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN >> N) | (IN << (8*sizeof(WORD)-N));} static inline DWORD ROR__DWORD__DWORD__UINT(BOOL EN, BOOL *ENO, DWORD IN, UINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN >> N) | (IN << (8*sizeof(DWORD)-N));} static inline LWORD ROR__LWORD__LWORD__UINT(BOOL EN, BOOL *ENO, LWORD IN, UINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN >> N) | (IN << (8*sizeof(LWORD)-N));} static inline BYTE ROR__BYTE__BYTE__UDINT(BOOL EN, BOOL *ENO, BYTE IN, UDINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN >> N) | (IN << (8*sizeof(BYTE)-N));} static inline WORD ROR__WORD__WORD__UDINT(BOOL EN, BOOL *ENO, WORD IN, UDINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN >> N) | (IN << (8*sizeof(WORD)-N));} static inline DWORD ROR__DWORD__DWORD__UDINT(BOOL EN, BOOL *ENO, DWORD IN, UDINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN >> N) | (IN << (8*sizeof(DWORD)-N));} static inline LWORD ROR__LWORD__LWORD__UDINT(BOOL EN, BOOL *ENO, LWORD IN, UDINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN >> N) | (IN << (8*sizeof(LWORD)-N));} static inline BYTE ROR__BYTE__BYTE__ULINT(BOOL EN, BOOL *ENO, BYTE IN, ULINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN >> N) | (IN << (8*sizeof(BYTE)-N));} static inline WORD ROR__WORD__WORD__ULINT(BOOL EN, BOOL *ENO, WORD IN, ULINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN >> N) | (IN << (8*sizeof(WORD)-N));} static inline DWORD ROR__DWORD__DWORD__ULINT(BOOL EN, BOOL *ENO, DWORD IN, ULINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN >> N) | (IN << (8*sizeof(DWORD)-N));} static inline LWORD ROR__LWORD__LWORD__ULINT(BOOL EN, BOOL *ENO, LWORD IN, ULINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN >> N) | (IN << (8*sizeof(LWORD)-N));}
# 1294 "iec_std_lib.h"
static inline BOOL ROL__BOOL__SINT(BOOL EN, BOOL *ENO, BOOL IN, SINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROL__BOOL__INT(BOOL EN, BOOL *ENO, BOOL IN, INT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROL__BOOL__DINT(BOOL EN, BOOL *ENO, BOOL IN, DINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROL__BOOL__LINT(BOOL EN, BOOL *ENO, BOOL IN, LINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROL__BOOL__USINT(BOOL EN, BOOL *ENO, BOOL IN, USINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROL__BOOL__UINT(BOOL EN, BOOL *ENO, BOOL IN, UINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROL__BOOL__UDINT(BOOL EN, BOOL *ENO, BOOL IN, UDINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; } static inline BOOL ROL__BOOL__ULINT(BOOL EN, BOOL *ENO, BOOL IN, ULINT N) { if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;; return IN; }
# 1304 "iec_std_lib.h"
static inline BYTE ROL__BYTE__BYTE__SINT(BOOL EN, BOOL *ENO, BYTE IN, SINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN << N) | (IN >> (8*sizeof(BYTE)-N));} static inline WORD ROL__WORD__WORD__SINT(BOOL EN, BOOL *ENO, WORD IN, SINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN << N) | (IN >> (8*sizeof(WORD)-N));} static inline DWORD ROL__DWORD__DWORD__SINT(BOOL EN, BOOL *ENO, DWORD IN, SINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN << N) | (IN >> (8*sizeof(DWORD)-N));} static inline LWORD ROL__LWORD__LWORD__SINT(BOOL EN, BOOL *ENO, LWORD IN, SINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN << N) | (IN >> (8*sizeof(LWORD)-N));} static inline BYTE ROL__BYTE__BYTE__INT(BOOL EN, BOOL *ENO, BYTE IN, INT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN << N) | (IN >> (8*sizeof(BYTE)-N));} static inline WORD ROL__WORD__WORD__INT(BOOL EN, BOOL *ENO, WORD IN, INT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN << N) | (IN >> (8*sizeof(WORD)-N));} static inline DWORD ROL__DWORD__DWORD__INT(BOOL EN, BOOL *ENO, DWORD IN, INT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN << N) | (IN >> (8*sizeof(DWORD)-N));} static inline LWORD ROL__LWORD__LWORD__INT(BOOL EN, BOOL *ENO, LWORD IN, INT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN << N) | (IN >> (8*sizeof(LWORD)-N));} static inline BYTE ROL__BYTE__BYTE__DINT(BOOL EN, BOOL *ENO, BYTE IN, DINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN << N) | (IN >> (8*sizeof(BYTE)-N));} static inline WORD ROL__WORD__WORD__DINT(BOOL EN, BOOL *ENO, WORD IN, DINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN << N) | (IN >> (8*sizeof(WORD)-N));} static inline DWORD ROL__DWORD__DWORD__DINT(BOOL EN, BOOL *ENO, DWORD IN, DINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN << N) | (IN >> (8*sizeof(DWORD)-N));} static inline LWORD ROL__LWORD__LWORD__DINT(BOOL EN, BOOL *ENO, LWORD IN, DINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN << N) | (IN >> (8*sizeof(LWORD)-N));} static inline BYTE ROL__BYTE__BYTE__LINT(BOOL EN, BOOL *ENO, BYTE IN, LINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN << N) | (IN >> (8*sizeof(BYTE)-N));} static inline WORD ROL__WORD__WORD__LINT(BOOL EN, BOOL *ENO, WORD IN, LINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN << N) | (IN >> (8*sizeof(WORD)-N));} static inline DWORD ROL__DWORD__DWORD__LINT(BOOL EN, BOOL *ENO, DWORD IN, LINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN << N) | (IN >> (8*sizeof(DWORD)-N));} static inline LWORD ROL__LWORD__LWORD__LINT(BOOL EN, BOOL *ENO, LWORD IN, LINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN << N) | (IN >> (8*sizeof(LWORD)-N));} static inline BYTE ROL__BYTE__BYTE__USINT(BOOL EN, BOOL *ENO, BYTE IN, USINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN << N) | (IN >> (8*sizeof(BYTE)-N));} static inline WORD ROL__WORD__WORD__USINT(BOOL EN, BOOL *ENO, WORD IN, USINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN << N) | (IN >> (8*sizeof(WORD)-N));} static inline DWORD ROL__DWORD__DWORD__USINT(BOOL EN, BOOL *ENO, DWORD IN, USINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN << N) | (IN >> (8*sizeof(DWORD)-N));} static inline LWORD ROL__LWORD__LWORD__USINT(BOOL EN, BOOL *ENO, LWORD IN, USINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN << N) | (IN >> (8*sizeof(LWORD)-N));} static inline BYTE ROL__BYTE__BYTE__UINT(BOOL EN, BOOL *ENO, BYTE IN, UINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN << N) | (IN >> (8*sizeof(BYTE)-N));} static inline WORD ROL__WORD__WORD__UINT(BOOL EN, BOOL *ENO, WORD IN, UINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN << N) | (IN >> (8*sizeof(WORD)-N));} static inline DWORD ROL__DWORD__DWORD__UINT(BOOL EN, BOOL *ENO, DWORD IN, UINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN << N) | (IN >> (8*sizeof(DWORD)-N));} static inline LWORD ROL__LWORD__LWORD__UINT(BOOL EN, BOOL *ENO, LWORD IN, UINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN << N) | (IN >> (8*sizeof(LWORD)-N));} static inline BYTE ROL__BYTE__BYTE__UDINT(BOOL EN, BOOL *ENO, BYTE IN, UDINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN << N) | (IN >> (8*sizeof(BYTE)-N));} static inline WORD ROL__WORD__WORD__UDINT(BOOL EN, BOOL *ENO, WORD IN, UDINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN << N) | (IN >> (8*sizeof(WORD)-N));} static inline DWORD ROL__DWORD__DWORD__UDINT(BOOL EN, BOOL *ENO, DWORD IN, UDINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN << N) | (IN >> (8*sizeof(DWORD)-N));} static inline LWORD ROL__LWORD__LWORD__UDINT(BOOL EN, BOOL *ENO, LWORD IN, UDINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN << N) | (IN >> (8*sizeof(LWORD)-N));} static inline BYTE ROL__BYTE__BYTE__ULINT(BOOL EN, BOOL *ENO, BYTE IN, ULINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(BYTE); return (IN << N) | (IN >> (8*sizeof(BYTE)-N));} static inline WORD ROL__WORD__WORD__ULINT(BOOL EN, BOOL *ENO, WORD IN, ULINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(WORD); return (IN << N) | (IN >> (8*sizeof(WORD)-N));} static inline DWORD ROL__DWORD__DWORD__ULINT(BOOL EN, BOOL *ENO, DWORD IN, ULINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(DWORD); return (IN << N) | (IN >> (8*sizeof(DWORD)-N));} static inline LWORD ROL__LWORD__LWORD__ULINT(BOOL EN, BOOL *ENO, LWORD IN, ULINT N){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; N %= 8*sizeof(LWORD); return (IN << N) | (IN >> (8*sizeof(LWORD)-N));}
# 1316 "iec_std_lib.h"
static inline BOOL AND_BOOL(BOOL EN, BOOL *ENO, UINT param_count, BOOL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 && __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;}
static inline BOOL AND__BOOL__BOOL(BOOL EN, BOOL *ENO, UINT param_count, BOOL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 && __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;}




static inline BYTE AND_BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 & __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline BYTE AND__BYTE__BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 & __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline WORD AND_WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 & __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline WORD AND__WORD__WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 & __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline DWORD AND_DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 & __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline DWORD AND__DWORD__DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 & __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline LWORD AND_LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 & __builtin_va_arg(ap,LWORD); } __builtin_va_end(ap); return op1;} static inline LWORD AND__LWORD__LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 & __builtin_va_arg(ap,LWORD); } __builtin_va_end(ap); return op1;}





static inline BOOL OR_BOOL(BOOL EN, BOOL *ENO, UINT param_count, BOOL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 || __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;}
static inline BOOL OR__BOOL__BOOL(BOOL EN, BOOL *ENO, UINT param_count, BOOL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 || __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;}




static inline BYTE OR_BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 | __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline BYTE OR__BYTE__BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 | __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline WORD OR_WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 | __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline WORD OR__WORD__WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 | __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline DWORD OR_DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 | __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline DWORD OR__DWORD__DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 | __builtin_va_arg(ap,DWORD); } __builtin_va_end(ap); return op1;} static inline LWORD OR_LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 | __builtin_va_arg(ap,LWORD); } __builtin_va_end(ap); return op1;} static inline LWORD OR__LWORD__LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ op1 = op1 | __builtin_va_arg(ap,LWORD); } __builtin_va_end(ap); return op1;}
# 1357 "iec_std_lib.h"
static inline BOOL XOR_BOOL(BOOL EN, BOOL *ENO, UINT param_count, BOOL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BOOL tmp = __builtin_va_arg(ap,DWORD); op1 = (op1 && !tmp) || (!op1 && tmp); } __builtin_va_end(ap); return op1; }
static inline BOOL XOR__BOOL__BOOL(BOOL EN, BOOL *ENO, UINT param_count, BOOL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BOOL tmp = __builtin_va_arg(ap,DWORD); op1 = (op1 && !tmp) || (!op1 && tmp); } __builtin_va_end(ap); return op1; }
# 1371 "iec_std_lib.h"
static inline BOOL NOT_BOOL(BOOL EN, BOOL *ENO, BOOL op1){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return !op1;
}


static inline BOOL NOT__BOOL__BOOL(BOOL EN, BOOL *ENO, BOOL op1){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return !op1;
}







static inline BYTE NOT_BYTE(BOOL EN, BOOL *ENO, BYTE op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return ~op1;} static inline WORD NOT_WORD(BOOL EN, BOOL *ENO, WORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return ~op1;} static inline DWORD NOT_DWORD(BOOL EN, BOOL *ENO, DWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return ~op1;} static inline LWORD NOT_LWORD(BOOL EN, BOOL *ENO, LWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return ~op1;}
# 1397 "iec_std_lib.h"
static inline BYTE NOT__BYTE__BYTE(BOOL EN, BOOL *ENO, BYTE op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return ~op1;} static inline WORD NOT__WORD__WORD(BOOL EN, BOOL *ENO, WORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return ~op1;} static inline DWORD NOT__DWORD__DWORD(BOOL EN, BOOL *ENO, DWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return ~op1;} static inline LWORD NOT__LWORD__LWORD(BOOL EN, BOOL *ENO, LWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return ~op1;}
# 1426 "iec_std_lib.h"
 static inline REAL SEL_REAL(BOOL EN, BOOL *ENO, BOOL G, REAL op0, REAL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline LREAL SEL_LREAL(BOOL EN, BOOL *ENO, BOOL G, LREAL op0, LREAL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline SINT SEL_SINT(BOOL EN, BOOL *ENO, BOOL G, SINT op0, SINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline INT SEL_INT(BOOL EN, BOOL *ENO, BOOL G, INT op0, INT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline DINT SEL_DINT(BOOL EN, BOOL *ENO, BOOL G, DINT op0, DINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline LINT SEL_LINT(BOOL EN, BOOL *ENO, BOOL G, LINT op0, LINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline USINT SEL_USINT(BOOL EN, BOOL *ENO, BOOL G, USINT op0, USINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline UINT SEL_UINT(BOOL EN, BOOL *ENO, BOOL G, UINT op0, UINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline UDINT SEL_UDINT(BOOL EN, BOOL *ENO, BOOL G, UDINT op0, UDINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline ULINT SEL_ULINT(BOOL EN, BOOL *ENO, BOOL G, ULINT op0, ULINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline TIME SEL_TIME(BOOL EN, BOOL *ENO, BOOL G, TIME op0, TIME op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline BYTE SEL_BYTE(BOOL EN, BOOL *ENO, BOOL G, BYTE op0, BYTE op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline WORD SEL_WORD(BOOL EN, BOOL *ENO, BOOL G, WORD op0, WORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline DWORD SEL_DWORD(BOOL EN, BOOL *ENO, BOOL G, DWORD op0, DWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline LWORD SEL_LWORD(BOOL EN, BOOL *ENO, BOOL G, LWORD op0, LWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline BOOL SEL_BOOL(BOOL EN, BOOL *ENO, BOOL G, BOOL op0, BOOL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline STRING SEL_STRING(BOOL EN, BOOL *ENO, BOOL G, STRING op0, STRING op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline DATE SEL_DATE(BOOL EN, BOOL *ENO, BOOL G, DATE op0, DATE op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline TOD SEL_TOD(BOOL EN, BOOL *ENO, BOOL G, TOD op0, TOD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline DT SEL_DT(BOOL EN, BOOL *ENO, BOOL G, DT op0, DT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;}
# 1435 "iec_std_lib.h"
 static inline REAL SEL__REAL__BOOL__REAL__REAL(BOOL EN, BOOL *ENO, BOOL G, REAL op0, REAL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline LREAL SEL__LREAL__BOOL__LREAL__LREAL(BOOL EN, BOOL *ENO, BOOL G, LREAL op0, LREAL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline SINT SEL__SINT__BOOL__SINT__SINT(BOOL EN, BOOL *ENO, BOOL G, SINT op0, SINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline INT SEL__INT__BOOL__INT__INT(BOOL EN, BOOL *ENO, BOOL G, INT op0, INT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline DINT SEL__DINT__BOOL__DINT__DINT(BOOL EN, BOOL *ENO, BOOL G, DINT op0, DINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline LINT SEL__LINT__BOOL__LINT__LINT(BOOL EN, BOOL *ENO, BOOL G, LINT op0, LINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline USINT SEL__USINT__BOOL__USINT__USINT(BOOL EN, BOOL *ENO, BOOL G, USINT op0, USINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline UINT SEL__UINT__BOOL__UINT__UINT(BOOL EN, BOOL *ENO, BOOL G, UINT op0, UINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline UDINT SEL__UDINT__BOOL__UDINT__UDINT(BOOL EN, BOOL *ENO, BOOL G, UDINT op0, UDINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline ULINT SEL__ULINT__BOOL__ULINT__ULINT(BOOL EN, BOOL *ENO, BOOL G, ULINT op0, ULINT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline TIME SEL__TIME__BOOL__TIME__TIME(BOOL EN, BOOL *ENO, BOOL G, TIME op0, TIME op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline BYTE SEL__BYTE__BOOL__BYTE__BYTE(BOOL EN, BOOL *ENO, BOOL G, BYTE op0, BYTE op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline WORD SEL__WORD__BOOL__WORD__WORD(BOOL EN, BOOL *ENO, BOOL G, WORD op0, WORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline DWORD SEL__DWORD__BOOL__DWORD__DWORD(BOOL EN, BOOL *ENO, BOOL G, DWORD op0, DWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline LWORD SEL__LWORD__BOOL__LWORD__LWORD(BOOL EN, BOOL *ENO, BOOL G, LWORD op0, LWORD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline BOOL SEL__BOOL__BOOL__BOOL__BOOL(BOOL EN, BOOL *ENO, BOOL G, BOOL op0, BOOL op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline STRING SEL__STRING__BOOL__STRING__STRING(BOOL EN, BOOL *ENO, BOOL G, STRING op0, STRING op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline DATE SEL__DATE__BOOL__DATE__DATE(BOOL EN, BOOL *ENO, BOOL G, DATE op0, DATE op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline TOD SEL__TOD__BOOL__TOD__TOD(BOOL EN, BOOL *ENO, BOOL G, TOD op0, TOD op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;} static inline DT SEL__DT__BOOL__DT__DT(BOOL EN, BOOL *ENO, BOOL G, DT op0, DT op1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return G ? op1 : op0;}
# 1464 "iec_std_lib.h"
static inline BYTE MAX_BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline BYTE MAX__BYTE__BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline WORD MAX_WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline WORD MAX__WORD__WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DWORD MAX_DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DWORD MAX__DWORD__DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LWORD MAX_LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LWORD MAX__LWORD__LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline BOOL MAX_BOOL(BOOL EN, BOOL *ENO, UINT param_count, BOOL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BOOL tmp = __builtin_va_arg(ap,DWORD); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline BOOL MAX__BOOL__BOOL(BOOL EN, BOOL *ENO, UINT param_count, BOOL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BOOL tmp = __builtin_va_arg(ap,DWORD); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;}
static inline REAL MAX_REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline REAL MAX__REAL__REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LREAL MAX_LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LREAL MAX__LREAL__LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline SINT MAX_SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline SINT MAX__SINT__SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline INT MAX_INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline INT MAX__INT__INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DINT MAX_DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DINT MAX__DINT__DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LINT MAX_LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LINT MAX__LINT__LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline USINT MAX_USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline USINT MAX__USINT__USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline UINT MAX_UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline UINT MAX__UINT__UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline UDINT MAX_UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline UDINT MAX__UDINT__UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline ULINT MAX_ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline ULINT MAX__ULINT__ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); op1 = op1 < tmp ? tmp : op1; } __builtin_va_end(ap); return op1;}






static inline DATE MAX_DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DATE MAX__DATE__DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline TOD MAX_TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline TOD MAX__TOD__TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DT MAX_DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DT MAX__DT__DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0 ? tmp : op1; } __builtin_va_end(ap); return op1;}
static inline TIME MAX_TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline TIME MAX__TIME__TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0 ? tmp : op1; } __builtin_va_end(ap); return op1;}





static inline STRING MAX_STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); op1 = memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) < 0 ? tmp : op1; } __builtin_va_end(ap); return op1;}
static inline STRING MAX__STRING__STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); op1 = memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) < 0 ? tmp : op1; } __builtin_va_end(ap); return op1;}
# 1489 "iec_std_lib.h"
static inline BYTE MIN_BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline BYTE MIN__BYTE__BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline WORD MIN_WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline WORD MIN__WORD__WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DWORD MIN_DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DWORD MIN__DWORD__DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LWORD MIN_LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LWORD MIN__LWORD__LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;}
static inline REAL MIN_REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline REAL MIN__REAL__REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LREAL MIN_LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LREAL MIN__LREAL__LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline SINT MIN_SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline SINT MIN__SINT__SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline INT MIN_INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline INT MIN__INT__INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DINT MIN_DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DINT MIN__DINT__DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LINT MIN_LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline LINT MIN__LINT__LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline USINT MIN_USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline USINT MIN__USINT__USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline UINT MIN_UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline UINT MIN__UINT__UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline UDINT MIN_UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline UDINT MIN__UDINT__UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline ULINT MIN_ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline ULINT MIN__ULINT__ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); op1 = op1 > tmp ? tmp : op1; } __builtin_va_end(ap); return op1;}






static inline DATE MIN_DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DATE MIN__DATE__DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline TOD MIN_TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline TOD MIN__TOD__TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DT MIN_DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline DT MIN__DT__DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0 ? tmp : op1; } __builtin_va_end(ap); return op1;}
static inline TIME MIN_TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0 ? tmp : op1; } __builtin_va_end(ap); return op1;} static inline TIME MIN__TIME__TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); op1 = (tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0 ? tmp : op1; } __builtin_va_end(ap); return op1;}



static inline STRING MIN_STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); op1 = memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) > 0 ? tmp : op1; } __builtin_va_end(ap); return op1;}
static inline STRING MIN__STRING__STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); op1 = memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) > 0 ? tmp : op1; } __builtin_va_end(ap); return op1;}
# 1521 "iec_std_lib.h"
static inline BYTE LIMIT_BYTE(BOOL EN, BOOL *ENO, BYTE MN, BYTE IN, BYTE MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline BYTE LIMIT__BYTE__BYTE__BYTE__BYTE(BOOL EN, BOOL *ENO, BYTE MN, BYTE IN, BYTE MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline WORD LIMIT_WORD(BOOL EN, BOOL *ENO, WORD MN, WORD IN, WORD MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline WORD LIMIT__WORD__WORD__WORD__WORD(BOOL EN, BOOL *ENO, WORD MN, WORD IN, WORD MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline DWORD LIMIT_DWORD(BOOL EN, BOOL *ENO, DWORD MN, DWORD IN, DWORD MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline DWORD LIMIT__DWORD__DWORD__DWORD__DWORD(BOOL EN, BOOL *ENO, DWORD MN, DWORD IN, DWORD MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline LWORD LIMIT_LWORD(BOOL EN, BOOL *ENO, LWORD MN, LWORD IN, LWORD MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline LWORD LIMIT__LWORD__LWORD__LWORD__LWORD(BOOL EN, BOOL *ENO, LWORD MN, LWORD IN, LWORD MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;}
static inline REAL LIMIT_REAL(BOOL EN, BOOL *ENO, REAL MN, REAL IN, REAL MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline REAL LIMIT__REAL__REAL__REAL__REAL(BOOL EN, BOOL *ENO, REAL MN, REAL IN, REAL MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline LREAL LIMIT_LREAL(BOOL EN, BOOL *ENO, LREAL MN, LREAL IN, LREAL MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline LREAL LIMIT__LREAL__LREAL__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL MN, LREAL IN, LREAL MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline SINT LIMIT_SINT(BOOL EN, BOOL *ENO, SINT MN, SINT IN, SINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline SINT LIMIT__SINT__SINT__SINT__SINT(BOOL EN, BOOL *ENO, SINT MN, SINT IN, SINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline INT LIMIT_INT(BOOL EN, BOOL *ENO, INT MN, INT IN, INT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline INT LIMIT__INT__INT__INT__INT(BOOL EN, BOOL *ENO, INT MN, INT IN, INT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline DINT LIMIT_DINT(BOOL EN, BOOL *ENO, DINT MN, DINT IN, DINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline DINT LIMIT__DINT__DINT__DINT__DINT(BOOL EN, BOOL *ENO, DINT MN, DINT IN, DINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline LINT LIMIT_LINT(BOOL EN, BOOL *ENO, LINT MN, LINT IN, LINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline LINT LIMIT__LINT__LINT__LINT__LINT(BOOL EN, BOOL *ENO, LINT MN, LINT IN, LINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline USINT LIMIT_USINT(BOOL EN, BOOL *ENO, USINT MN, USINT IN, USINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline USINT LIMIT__USINT__USINT__USINT__USINT(BOOL EN, BOOL *ENO, USINT MN, USINT IN, USINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline UINT LIMIT_UINT(BOOL EN, BOOL *ENO, UINT MN, UINT IN, UINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline UINT LIMIT__UINT__UINT__UINT__UINT(BOOL EN, BOOL *ENO, UINT MN, UINT IN, UINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline UDINT LIMIT_UDINT(BOOL EN, BOOL *ENO, UDINT MN, UDINT IN, UDINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline UDINT LIMIT__UDINT__UDINT__UDINT__UDINT(BOOL EN, BOOL *ENO, UDINT MN, UDINT IN, UDINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline ULINT LIMIT_ULINT(BOOL EN, BOOL *ENO, ULINT MN, ULINT IN, ULINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;} static inline ULINT LIMIT__ULINT__ULINT__ULINT__ULINT(BOOL EN, BOOL *ENO, ULINT MN, ULINT IN, ULINT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return IN > MN ? IN < MX ? IN : MX : MN;}
# 1543 "iec_std_lib.h"
static inline DATE LIMIT_DATE(BOOL EN, BOOL *ENO, DATE MN, DATE IN, DATE MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (MN.tv_sec == IN.tv_sec ? IN.tv_nsec - MN.tv_nsec : IN.tv_sec - MN.tv_sec) > 0 ? (MX.tv_sec == IN.tv_sec ? IN.tv_nsec - MX.tv_nsec : IN.tv_sec - MX.tv_sec) < 0 ? IN : MX : MN;} static inline DATE LIMIT__DATE__DATE__DATE__DATE(BOOL EN, BOOL *ENO, DATE MN, DATE IN, DATE MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (MN.tv_sec == IN.tv_sec ? IN.tv_nsec - MN.tv_nsec : IN.tv_sec - MN.tv_sec) > 0 ? (MX.tv_sec == IN.tv_sec ? IN.tv_nsec - MX.tv_nsec : IN.tv_sec - MX.tv_sec) < 0 ? IN : MX : MN;} static inline TOD LIMIT_TOD(BOOL EN, BOOL *ENO, TOD MN, TOD IN, TOD MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (MN.tv_sec == IN.tv_sec ? IN.tv_nsec - MN.tv_nsec : IN.tv_sec - MN.tv_sec) > 0 ? (MX.tv_sec == IN.tv_sec ? IN.tv_nsec - MX.tv_nsec : IN.tv_sec - MX.tv_sec) < 0 ? IN : MX : MN;} static inline TOD LIMIT__TOD__TOD__TOD__TOD(BOOL EN, BOOL *ENO, TOD MN, TOD IN, TOD MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (MN.tv_sec == IN.tv_sec ? IN.tv_nsec - MN.tv_nsec : IN.tv_sec - MN.tv_sec) > 0 ? (MX.tv_sec == IN.tv_sec ? IN.tv_nsec - MX.tv_nsec : IN.tv_sec - MX.tv_sec) < 0 ? IN : MX : MN;} static inline DT LIMIT_DT(BOOL EN, BOOL *ENO, DT MN, DT IN, DT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (MN.tv_sec == IN.tv_sec ? IN.tv_nsec - MN.tv_nsec : IN.tv_sec - MN.tv_sec) > 0 ? (MX.tv_sec == IN.tv_sec ? IN.tv_nsec - MX.tv_nsec : IN.tv_sec - MX.tv_sec) < 0 ? IN : MX : MN;} static inline DT LIMIT__DT__DT__DT__DT(BOOL EN, BOOL *ENO, DT MN, DT IN, DT MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (MN.tv_sec == IN.tv_sec ? IN.tv_nsec - MN.tv_nsec : IN.tv_sec - MN.tv_sec) > 0 ? (MX.tv_sec == IN.tv_sec ? IN.tv_nsec - MX.tv_nsec : IN.tv_sec - MX.tv_sec) < 0 ? IN : MX : MN;}
static inline TIME LIMIT_TIME(BOOL EN, BOOL *ENO, TIME MN, TIME IN, TIME MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (MN.tv_sec == IN.tv_sec ? IN.tv_nsec - MN.tv_nsec : IN.tv_sec - MN.tv_sec) > 0 ? (MX.tv_sec == IN.tv_sec ? IN.tv_nsec - MX.tv_nsec : IN.tv_sec - MX.tv_sec) < 0 ? IN : MX : MN;} static inline TIME LIMIT__TIME__TIME__TIME__TIME(BOOL EN, BOOL *ENO, TIME MN, TIME IN, TIME MX){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (MN.tv_sec == IN.tv_sec ? IN.tv_nsec - MN.tv_nsec : IN.tv_sec - MN.tv_sec) > 0 ? (MX.tv_sec == IN.tv_sec ? IN.tv_nsec - MX.tv_nsec : IN.tv_sec - MX.tv_sec) < 0 ? IN : MX : MN;}




static inline STRING LIMIT_STRING(BOOL EN, BOOL *ENO, STRING MN, STRING IN, STRING MX){
    if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
    return memcmp((char*)&IN.body,(char*)&MN.body, IN.len < MN.len ? IN.len : MN.len) > 0 ? memcmp((char*)&IN.body,(char*)&MX.body, IN.len < MX.len ? IN.len : MX.len) < 0 ? IN : MX : MN;
}


static inline STRING LIMIT__STRING__STRING__STRING__STRING(BOOL EN, BOOL *ENO, STRING MN, STRING IN, STRING MX){
    if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
    return memcmp((char*)&IN.body,(char*)&MN.body, IN.len < MN.len ? IN.len : MN.len) > 0 ? memcmp((char*)&IN.body,(char*)&MX.body, IN.len < MX.len ? IN.len : MX.len) < 0 ? IN : MX : MN;
}
# 1593 "iec_std_lib.h"
 static inline REAL MUX__REAL__SINT__REAL(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; REAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline REAL MUX__REAL__INT__REAL(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; REAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline REAL MUX__REAL__DINT__REAL(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; REAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline REAL MUX__REAL__LINT__REAL(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; REAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline REAL MUX__REAL__USINT__REAL(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; REAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline REAL MUX__REAL__UINT__REAL(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; REAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline REAL MUX__REAL__UDINT__REAL(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; REAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline REAL MUX__REAL__ULINT__REAL(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; REAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline LREAL MUX__LREAL__SINT__LREAL(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; LREAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline LREAL MUX__LREAL__INT__LREAL(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; LREAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline LREAL MUX__LREAL__DINT__LREAL(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; LREAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline LREAL MUX__LREAL__LINT__LREAL(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; LREAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline LREAL MUX__LREAL__USINT__LREAL(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; LREAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline LREAL MUX__LREAL__UINT__LREAL(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; LREAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline LREAL MUX__LREAL__UDINT__LREAL(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; LREAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline LREAL MUX__LREAL__ULINT__LREAL(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; LREAL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LREAL); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LREAL); } } __builtin_va_end(ap); return tmp;} static inline SINT MUX__SINT__SINT__SINT(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; SINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline SINT MUX__SINT__INT__SINT(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; SINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline SINT MUX__SINT__DINT__SINT(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; SINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline SINT MUX__SINT__LINT__SINT(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; SINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline SINT MUX__SINT__USINT__SINT(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; SINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline SINT MUX__SINT__UINT__SINT(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; SINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline SINT MUX__SINT__UDINT__SINT(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; SINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline SINT MUX__SINT__ULINT__SINT(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; SINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline INT MUX__INT__SINT__INT(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; INT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline INT MUX__INT__INT__INT(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; INT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline INT MUX__INT__DINT__INT(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; INT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline INT MUX__INT__LINT__INT(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; INT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline INT MUX__INT__USINT__INT(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; INT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline INT MUX__INT__UINT__INT(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; INT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline INT MUX__INT__UDINT__INT(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; INT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline INT MUX__INT__ULINT__INT(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; INT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline DINT MUX__DINT__SINT__DINT(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; DINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline DINT MUX__DINT__INT__DINT(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; DINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline DINT MUX__DINT__DINT__DINT(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; DINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline DINT MUX__DINT__LINT__DINT(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; DINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline DINT MUX__DINT__USINT__DINT(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; DINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline DINT MUX__DINT__UINT__DINT(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; DINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline DINT MUX__DINT__UDINT__DINT(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; DINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline DINT MUX__DINT__ULINT__DINT(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; DINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DINT); } } __builtin_va_end(ap); return tmp;} static inline LINT MUX__LINT__SINT__LINT(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; LINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LINT); } } __builtin_va_end(ap); return tmp;} static inline LINT MUX__LINT__INT__LINT(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; LINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LINT); } } __builtin_va_end(ap); return tmp;} static inline LINT MUX__LINT__DINT__LINT(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; LINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LINT); } } __builtin_va_end(ap); return tmp;} static inline LINT MUX__LINT__LINT__LINT(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; LINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LINT); } } __builtin_va_end(ap); return tmp;} static inline LINT MUX__LINT__USINT__LINT(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; LINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LINT); } } __builtin_va_end(ap); return tmp;} static inline LINT MUX__LINT__UINT__LINT(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; LINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LINT); } } __builtin_va_end(ap); return tmp;} static inline LINT MUX__LINT__UDINT__LINT(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; LINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LINT); } } __builtin_va_end(ap); return tmp;} static inline LINT MUX__LINT__ULINT__LINT(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; LINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LINT); } } __builtin_va_end(ap); return tmp;} static inline USINT MUX__USINT__SINT__USINT(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; USINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline USINT MUX__USINT__INT__USINT(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; USINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline USINT MUX__USINT__DINT__USINT(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; USINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline USINT MUX__USINT__LINT__USINT(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; USINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline USINT MUX__USINT__USINT__USINT(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; USINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline USINT MUX__USINT__UINT__USINT(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; USINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline USINT MUX__USINT__UDINT__USINT(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; USINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline USINT MUX__USINT__ULINT__USINT(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; USINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UINT MUX__UINT__SINT__UINT(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; UINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UINT MUX__UINT__INT__UINT(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; UINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UINT MUX__UINT__DINT__UINT(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; UINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UINT MUX__UINT__LINT__UINT(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; UINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UINT MUX__UINT__USINT__UINT(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; UINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UINT MUX__UINT__UINT__UINT(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; UINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UINT MUX__UINT__UDINT__UINT(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; UINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UINT MUX__UINT__ULINT__UINT(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; UINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UDINT MUX__UDINT__SINT__UDINT(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; UDINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UDINT MUX__UDINT__INT__UDINT(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; UDINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UDINT MUX__UDINT__DINT__UDINT(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; UDINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UDINT MUX__UDINT__LINT__UDINT(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; UDINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UDINT MUX__UDINT__USINT__UDINT(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; UDINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UDINT MUX__UDINT__UINT__UDINT(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; UDINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UDINT MUX__UDINT__UDINT__UDINT(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; UDINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline UDINT MUX__UDINT__ULINT__UDINT(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; UDINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,UDINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,UDINT); } } __builtin_va_end(ap); return tmp;} static inline ULINT MUX__ULINT__SINT__ULINT(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; ULINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,ULINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,ULINT); } } __builtin_va_end(ap); return tmp;} static inline ULINT MUX__ULINT__INT__ULINT(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; ULINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,ULINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,ULINT); } } __builtin_va_end(ap); return tmp;} static inline ULINT MUX__ULINT__DINT__ULINT(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; ULINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,ULINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,ULINT); } } __builtin_va_end(ap); return tmp;} static inline ULINT MUX__ULINT__LINT__ULINT(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; ULINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,ULINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,ULINT); } } __builtin_va_end(ap); return tmp;} static inline ULINT MUX__ULINT__USINT__ULINT(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; ULINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,ULINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,ULINT); } } __builtin_va_end(ap); return tmp;} static inline ULINT MUX__ULINT__UINT__ULINT(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; ULINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,ULINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,ULINT); } } __builtin_va_end(ap); return tmp;} static inline ULINT MUX__ULINT__UDINT__ULINT(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; ULINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,ULINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,ULINT); } } __builtin_va_end(ap); return tmp;} static inline ULINT MUX__ULINT__ULINT__ULINT(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; ULINT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,ULINT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,ULINT); } } __builtin_va_end(ap); return tmp;} static inline TIME MUX__TIME__SINT__TIME(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; TIME tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TIME){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TIME); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TIME); } } __builtin_va_end(ap); return tmp;} static inline TIME MUX__TIME__INT__TIME(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; TIME tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TIME){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TIME); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TIME); } } __builtin_va_end(ap); return tmp;} static inline TIME MUX__TIME__DINT__TIME(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; TIME tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TIME){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TIME); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TIME); } } __builtin_va_end(ap); return tmp;} static inline TIME MUX__TIME__LINT__TIME(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; TIME tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TIME){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TIME); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TIME); } } __builtin_va_end(ap); return tmp;} static inline TIME MUX__TIME__USINT__TIME(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; TIME tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TIME){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TIME); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TIME); } } __builtin_va_end(ap); return tmp;} static inline TIME MUX__TIME__UINT__TIME(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; TIME tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TIME){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TIME); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TIME); } } __builtin_va_end(ap); return tmp;} static inline TIME MUX__TIME__UDINT__TIME(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; TIME tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TIME){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TIME); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TIME); } } __builtin_va_end(ap); return tmp;} static inline TIME MUX__TIME__ULINT__TIME(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; TIME tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TIME){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TIME); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TIME); } } __builtin_va_end(ap); return tmp;} static inline BYTE MUX__BYTE__SINT__BYTE(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; BYTE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BYTE MUX__BYTE__INT__BYTE(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; BYTE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BYTE MUX__BYTE__DINT__BYTE(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; BYTE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BYTE MUX__BYTE__LINT__BYTE(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; BYTE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BYTE MUX__BYTE__USINT__BYTE(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; BYTE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BYTE MUX__BYTE__UINT__BYTE(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; BYTE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BYTE MUX__BYTE__UDINT__BYTE(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; BYTE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BYTE MUX__BYTE__ULINT__BYTE(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; BYTE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline WORD MUX__WORD__SINT__WORD(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; WORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline WORD MUX__WORD__INT__WORD(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; WORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline WORD MUX__WORD__DINT__WORD(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; WORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline WORD MUX__WORD__LINT__WORD(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; WORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline WORD MUX__WORD__USINT__WORD(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; WORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline WORD MUX__WORD__UINT__WORD(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; WORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline WORD MUX__WORD__UDINT__WORD(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; WORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline WORD MUX__WORD__ULINT__WORD(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; WORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline DWORD MUX__DWORD__SINT__DWORD(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; DWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline DWORD MUX__DWORD__INT__DWORD(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; DWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline DWORD MUX__DWORD__DINT__DWORD(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; DWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline DWORD MUX__DWORD__LINT__DWORD(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; DWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline DWORD MUX__DWORD__USINT__DWORD(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; DWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline DWORD MUX__DWORD__UINT__DWORD(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; DWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline DWORD MUX__DWORD__UDINT__DWORD(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; DWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline DWORD MUX__DWORD__ULINT__DWORD(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; DWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline LWORD MUX__LWORD__SINT__LWORD(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; LWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LWORD); } } __builtin_va_end(ap); return tmp;} static inline LWORD MUX__LWORD__INT__LWORD(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; LWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LWORD); } } __builtin_va_end(ap); return tmp;} static inline LWORD MUX__LWORD__DINT__LWORD(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; LWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LWORD); } } __builtin_va_end(ap); return tmp;} static inline LWORD MUX__LWORD__LINT__LWORD(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; LWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LWORD); } } __builtin_va_end(ap); return tmp;} static inline LWORD MUX__LWORD__USINT__LWORD(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; LWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LWORD); } } __builtin_va_end(ap); return tmp;} static inline LWORD MUX__LWORD__UINT__LWORD(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; LWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LWORD); } } __builtin_va_end(ap); return tmp;} static inline LWORD MUX__LWORD__UDINT__LWORD(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; LWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LWORD); } } __builtin_va_end(ap); return tmp;} static inline LWORD MUX__LWORD__ULINT__LWORD(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; LWORD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,LWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,LWORD); } } __builtin_va_end(ap); return tmp;} static inline BOOL MUX__BOOL__SINT__BOOL(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; BOOL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BOOL MUX__BOOL__INT__BOOL(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; BOOL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BOOL MUX__BOOL__DINT__BOOL(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; BOOL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BOOL MUX__BOOL__LINT__BOOL(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; BOOL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BOOL MUX__BOOL__USINT__BOOL(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; BOOL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BOOL MUX__BOOL__UINT__BOOL(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; BOOL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BOOL MUX__BOOL__UDINT__BOOL(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; BOOL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline BOOL MUX__BOOL__ULINT__BOOL(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; BOOL tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = 0; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DWORD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DWORD); } } __builtin_va_end(ap); return tmp;} static inline STRING MUX__STRING__SINT__STRING(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; STRING tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (STRING){0,""}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,STRING); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,STRING); } } __builtin_va_end(ap); return tmp;} static inline STRING MUX__STRING__INT__STRING(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; STRING tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (STRING){0,""}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,STRING); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,STRING); } } __builtin_va_end(ap); return tmp;} static inline STRING MUX__STRING__DINT__STRING(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; STRING tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (STRING){0,""}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,STRING); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,STRING); } } __builtin_va_end(ap); return tmp;} static inline STRING MUX__STRING__LINT__STRING(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; STRING tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (STRING){0,""}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,STRING); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,STRING); } } __builtin_va_end(ap); return tmp;} static inline STRING MUX__STRING__USINT__STRING(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; STRING tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (STRING){0,""}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,STRING); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,STRING); } } __builtin_va_end(ap); return tmp;} static inline STRING MUX__STRING__UINT__STRING(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; STRING tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (STRING){0,""}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,STRING); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,STRING); } } __builtin_va_end(ap); return tmp;} static inline STRING MUX__STRING__UDINT__STRING(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; STRING tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (STRING){0,""}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,STRING); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,STRING); } } __builtin_va_end(ap); return tmp;} static inline STRING MUX__STRING__ULINT__STRING(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; STRING tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (STRING){0,""}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,STRING); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,STRING); } } __builtin_va_end(ap); return tmp;} static inline DATE MUX__DATE__SINT__DATE(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; DATE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DATE){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DATE); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DATE); } } __builtin_va_end(ap); return tmp;} static inline DATE MUX__DATE__INT__DATE(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; DATE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DATE){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DATE); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DATE); } } __builtin_va_end(ap); return tmp;} static inline DATE MUX__DATE__DINT__DATE(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; DATE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DATE){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DATE); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DATE); } } __builtin_va_end(ap); return tmp;} static inline DATE MUX__DATE__LINT__DATE(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; DATE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DATE){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DATE); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DATE); } } __builtin_va_end(ap); return tmp;} static inline DATE MUX__DATE__USINT__DATE(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; DATE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DATE){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DATE); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DATE); } } __builtin_va_end(ap); return tmp;} static inline DATE MUX__DATE__UINT__DATE(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; DATE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DATE){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DATE); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DATE); } } __builtin_va_end(ap); return tmp;} static inline DATE MUX__DATE__UDINT__DATE(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; DATE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DATE){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DATE); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DATE); } } __builtin_va_end(ap); return tmp;} static inline DATE MUX__DATE__ULINT__DATE(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; DATE tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DATE){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DATE){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DATE); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DATE); } } __builtin_va_end(ap); return tmp;} static inline TOD MUX__TOD__SINT__TOD(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; TOD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TOD){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TOD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TOD); } } __builtin_va_end(ap); return tmp;} static inline TOD MUX__TOD__INT__TOD(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; TOD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TOD){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TOD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TOD); } } __builtin_va_end(ap); return tmp;} static inline TOD MUX__TOD__DINT__TOD(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; TOD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TOD){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TOD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TOD); } } __builtin_va_end(ap); return tmp;} static inline TOD MUX__TOD__LINT__TOD(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; TOD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TOD){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TOD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TOD); } } __builtin_va_end(ap); return tmp;} static inline TOD MUX__TOD__USINT__TOD(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; TOD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TOD){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TOD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TOD); } } __builtin_va_end(ap); return tmp;} static inline TOD MUX__TOD__UINT__TOD(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; TOD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TOD){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TOD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TOD); } } __builtin_va_end(ap); return tmp;} static inline TOD MUX__TOD__UDINT__TOD(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; TOD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TOD){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TOD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TOD); } } __builtin_va_end(ap); return tmp;} static inline TOD MUX__TOD__ULINT__TOD(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; TOD tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (TOD){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,TOD); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,TOD); } } __builtin_va_end(ap); return tmp;} static inline DT MUX__DT__SINT__DT(BOOL EN, BOOL *ENO, SINT K, UINT param_count, ...){ va_list ap; UINT i; DT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DT){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DT); } } __builtin_va_end(ap); return tmp;} static inline DT MUX__DT__INT__DT(BOOL EN, BOOL *ENO, INT K, UINT param_count, ...){ va_list ap; UINT i; DT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DT){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DT); } } __builtin_va_end(ap); return tmp;} static inline DT MUX__DT__DINT__DT(BOOL EN, BOOL *ENO, DINT K, UINT param_count, ...){ va_list ap; UINT i; DT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DT){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DT); } } __builtin_va_end(ap); return tmp;} static inline DT MUX__DT__LINT__DT(BOOL EN, BOOL *ENO, LINT K, UINT param_count, ...){ va_list ap; UINT i; DT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DT){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DT); } } __builtin_va_end(ap); return tmp;} static inline DT MUX__DT__USINT__DT(BOOL EN, BOOL *ENO, USINT K, UINT param_count, ...){ va_list ap; UINT i; DT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DT){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DT); } } __builtin_va_end(ap); return tmp;} static inline DT MUX__DT__UINT__DT(BOOL EN, BOOL *ENO, UINT K, UINT param_count, ...){ va_list ap; UINT i; DT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DT){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DT); } } __builtin_va_end(ap); return tmp;} static inline DT MUX__DT__UDINT__DT(BOOL EN, BOOL *ENO, UDINT K, UINT param_count, ...){ va_list ap; UINT i; DT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DT){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DT); } } __builtin_va_end(ap); return tmp;} static inline DT MUX__DT__ULINT__DT(BOOL EN, BOOL *ENO, ULINT K, UINT param_count, ...){ va_list ap; UINT i; DT tmp; if (!EN || (K >= param_count)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; tmp = (DT){0,0}; __builtin_va_start(ap,param_count); for (i = 0; i < param_count; i++){ if(K == i){ tmp = __builtin_va_arg(ap,DT); __builtin_va_end(ap); return tmp; }else{ __builtin_va_arg(ap,DT); } } __builtin_va_end(ap); return tmp;}
# 1639 "iec_std_lib.h"
static inline BOOL GT_BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL GT_REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); if(op1 > tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}






static inline BOOL GT_DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT_DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL GT_TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GT__BOOL__TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) > 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}



static inline BOOL GT_STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); if(memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) > 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL GT__BOOL__STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); if(memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) > 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
# 1662 "iec_std_lib.h"
static inline BOOL GE_BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL GE_REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); if(op1 >= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}






static inline BOOL GE_DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) >= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) >= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) >= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) >= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE_DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) >= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) >= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL GE_TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) >= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL GE__BOOL__TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) >= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}



static inline BOOL GE_STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); if(memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) >= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL GE__BOOL__STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); if(memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) >= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
# 1687 "iec_std_lib.h"
static inline BOOL EQ_BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL EQ_REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); if(op1 == tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}






static inline BOOL EQ_DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) == 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) == 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) == 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) == 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ_DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) == 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) == 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL EQ_TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) == 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL EQ__BOOL__TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) == 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}



static inline BOOL EQ_STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); if(memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) == 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL EQ__BOOL__STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); if(memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) == 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
# 1711 "iec_std_lib.h"
static inline BOOL LT_BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL LT_REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); if(op1 < tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}






static inline BOOL LT_DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT_DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL LT_TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LT__BOOL__TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) < 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}



static inline BOOL LT_STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); if(memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) < 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL LT__BOOL__STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); if(memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) < 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
# 1735 "iec_std_lib.h"
static inline BOOL LE_BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__BYTE(BOOL EN, BOOL *ENO, UINT param_count, BYTE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ BYTE tmp = __builtin_va_arg(ap,DWORD); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__WORD(BOOL EN, BOOL *ENO, UINT param_count, WORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ WORD tmp = __builtin_va_arg(ap,DWORD); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__DWORD(BOOL EN, BOOL *ENO, UINT param_count, DWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DWORD tmp = __builtin_va_arg(ap,DWORD); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__LWORD(BOOL EN, BOOL *ENO, UINT param_count, LWORD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LWORD tmp = __builtin_va_arg(ap,LWORD); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL LE_REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__REAL(BOOL EN, BOOL *ENO, UINT param_count, REAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ REAL tmp = __builtin_va_arg(ap,LREAL); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__LREAL(BOOL EN, BOOL *ENO, UINT param_count, LREAL op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LREAL tmp = __builtin_va_arg(ap,LREAL); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__SINT(BOOL EN, BOOL *ENO, UINT param_count, SINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ SINT tmp = __builtin_va_arg(ap,DINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__INT(BOOL EN, BOOL *ENO, UINT param_count, INT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ INT tmp = __builtin_va_arg(ap,DINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__DINT(BOOL EN, BOOL *ENO, UINT param_count, DINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DINT tmp = __builtin_va_arg(ap,DINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__LINT(BOOL EN, BOOL *ENO, UINT param_count, LINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ LINT tmp = __builtin_va_arg(ap,LINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__USINT(BOOL EN, BOOL *ENO, UINT param_count, USINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ USINT tmp = __builtin_va_arg(ap,UDINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__UINT(BOOL EN, BOOL *ENO, UINT param_count, UINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UINT tmp = __builtin_va_arg(ap,UDINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__UDINT(BOOL EN, BOOL *ENO, UINT param_count, UDINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ UDINT tmp = __builtin_va_arg(ap,UDINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__ULINT(BOOL EN, BOOL *ENO, UINT param_count, ULINT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ ULINT tmp = __builtin_va_arg(ap,ULINT); if(op1 <= tmp){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}






static inline BOOL LE_DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) <= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__DATE(BOOL EN, BOOL *ENO, UINT param_count, DATE op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DATE tmp = __builtin_va_arg(ap,DATE); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) <= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) <= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__TOD(BOOL EN, BOOL *ENO, UINT param_count, TOD op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TOD tmp = __builtin_va_arg(ap,TOD); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) <= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE_DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) <= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__DT(BOOL EN, BOOL *ENO, UINT param_count, DT op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ DT tmp = __builtin_va_arg(ap,DT); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) <= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL LE_TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) <= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;} static inline BOOL LE__BOOL__TIME(BOOL EN, BOOL *ENO, UINT param_count, TIME op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ TIME tmp = __builtin_va_arg(ap,TIME); if((tmp.tv_sec == op1.tv_sec ? op1.tv_nsec - tmp.tv_nsec : op1.tv_sec - tmp.tv_sec) <= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}



static inline BOOL LE_STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); if(memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) <= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL LE__BOOL__STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); if(memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) <= 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
# 1773 "iec_std_lib.h"
static inline BOOL NE_BYTE(BOOL EN, BOOL *ENO, BYTE op1, BYTE op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__BYTE__BYTE(BOOL EN, BOOL *ENO, BYTE op1, BYTE op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_WORD(BOOL EN, BOOL *ENO, WORD op1, WORD op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__WORD__WORD(BOOL EN, BOOL *ENO, WORD op1, WORD op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_DWORD(BOOL EN, BOOL *ENO, DWORD op1, DWORD op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__DWORD__DWORD(BOOL EN, BOOL *ENO, DWORD op1, DWORD op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_LWORD(BOOL EN, BOOL *ENO, LWORD op1, LWORD op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__LWORD__LWORD(BOOL EN, BOOL *ENO, LWORD op1, LWORD op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;}
static inline BOOL NE_REAL(BOOL EN, BOOL *ENO, REAL op1, REAL op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__REAL__REAL(BOOL EN, BOOL *ENO, REAL op1, REAL op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_LREAL(BOOL EN, BOOL *ENO, LREAL op1, LREAL op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__LREAL__LREAL(BOOL EN, BOOL *ENO, LREAL op1, LREAL op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_SINT(BOOL EN, BOOL *ENO, SINT op1, SINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__SINT__SINT(BOOL EN, BOOL *ENO, SINT op1, SINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_INT(BOOL EN, BOOL *ENO, INT op1, INT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__INT__INT(BOOL EN, BOOL *ENO, INT op1, INT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_DINT(BOOL EN, BOOL *ENO, DINT op1, DINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__DINT__DINT(BOOL EN, BOOL *ENO, DINT op1, DINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_LINT(BOOL EN, BOOL *ENO, LINT op1, LINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__LINT__LINT(BOOL EN, BOOL *ENO, LINT op1, LINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_USINT(BOOL EN, BOOL *ENO, USINT op1, USINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__USINT__USINT(BOOL EN, BOOL *ENO, USINT op1, USINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_UINT(BOOL EN, BOOL *ENO, UINT op1, UINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__UINT__UINT(BOOL EN, BOOL *ENO, UINT op1, UINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_UDINT(BOOL EN, BOOL *ENO, UDINT op1, UDINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__UDINT__UDINT(BOOL EN, BOOL *ENO, UDINT op1, UDINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE_ULINT(BOOL EN, BOOL *ENO, ULINT op1, ULINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;} static inline BOOL NE__BOOL__ULINT__ULINT(BOOL EN, BOOL *ENO, ULINT op1, ULINT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return op1 != op2 ? 1 : 0;}






static inline BOOL NE_DATE(BOOL EN, BOOL *ENO, DATE op1, DATE op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (op2.tv_sec == op1.tv_sec ? op1.tv_nsec - op2.tv_nsec : op1.tv_sec - op2.tv_sec) != 0 ? 1 : 0;} static inline BOOL NE__BOOL__DATE__DATE(BOOL EN, BOOL *ENO, DATE op1, DATE op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (op2.tv_sec == op1.tv_sec ? op1.tv_nsec - op2.tv_nsec : op1.tv_sec - op2.tv_sec) != 0 ? 1 : 0;} static inline BOOL NE_TOD(BOOL EN, BOOL *ENO, TOD op1, TOD op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (op2.tv_sec == op1.tv_sec ? op1.tv_nsec - op2.tv_nsec : op1.tv_sec - op2.tv_sec) != 0 ? 1 : 0;} static inline BOOL NE__BOOL__TOD__TOD(BOOL EN, BOOL *ENO, TOD op1, TOD op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (op2.tv_sec == op1.tv_sec ? op1.tv_nsec - op2.tv_nsec : op1.tv_sec - op2.tv_sec) != 0 ? 1 : 0;} static inline BOOL NE_DT(BOOL EN, BOOL *ENO, DT op1, DT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (op2.tv_sec == op1.tv_sec ? op1.tv_nsec - op2.tv_nsec : op1.tv_sec - op2.tv_sec) != 0 ? 1 : 0;} static inline BOOL NE__BOOL__DT__DT(BOOL EN, BOOL *ENO, DT op1, DT op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (op2.tv_sec == op1.tv_sec ? op1.tv_nsec - op2.tv_nsec : op1.tv_sec - op2.tv_sec) != 0 ? 1 : 0;}
static inline BOOL NE_TIME(BOOL EN, BOOL *ENO, TIME op1, TIME op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (op2.tv_sec == op1.tv_sec ? op1.tv_nsec - op2.tv_nsec : op1.tv_sec - op2.tv_sec) != 0 ? 1 : 0;} static inline BOOL NE__BOOL__TIME__TIME(BOOL EN, BOOL *ENO, TIME op1, TIME op2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (op2.tv_sec == op1.tv_sec ? op1.tv_nsec - op2.tv_nsec : op1.tv_sec - op2.tv_sec) != 0 ? 1 : 0;}



static inline BOOL NE_STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); if(memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) != 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
static inline BOOL NE__BOOL__STRING__STRING(BOOL EN, BOOL *ENO, UINT param_count, STRING op1, ...){ va_list ap; UINT i; if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; __builtin_va_start(ap,op1); for (i = 0; i < param_count - 1; i++){ STRING tmp = __builtin_va_arg(ap,STRING); if(memcmp((char*)&op1.body,(char*)&tmp.body, op1.len < tmp.len ? op1.len : tmp.len) != 0){ op1 = tmp; }else{ __builtin_va_end(ap); return 0; } } __builtin_va_end(ap); return 1;}
# 1815 "iec_std_lib.h"
static inline __strlen_t __len(STRING IN) {return IN.len;}
# 1825 "iec_std_lib.h"
static inline SINT LEN__SINT__STRING(BOOL EN, BOOL *ENO, STRING par1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__len(par1);} static inline INT LEN__INT__STRING(BOOL EN, BOOL *ENO, STRING par1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__len(par1);} static inline DINT LEN__DINT__STRING(BOOL EN, BOOL *ENO, STRING par1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__len(par1);} static inline LINT LEN__LINT__STRING(BOOL EN, BOOL *ENO, STRING par1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__len(par1);} static inline USINT LEN__USINT__STRING(BOOL EN, BOOL *ENO, STRING par1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__len(par1);} static inline UINT LEN__UINT__STRING(BOOL EN, BOOL *ENO, STRING par1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__len(par1);} static inline UDINT LEN__UDINT__STRING(BOOL EN, BOOL *ENO, STRING par1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__len(par1);} static inline ULINT LEN__ULINT__STRING(BOOL EN, BOOL *ENO, STRING par1){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__len(par1);}
# 1843 "iec_std_lib.h"
static inline STRING LEFT__STRING__STRING__SINT(BOOL EN, BOOL *ENO, STRING IN, SINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (SINT)IN.len ? L : (SINT)IN.len; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body, L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body, L)); res.len = L; return res;} static inline STRING LEFT__STRING__STRING__INT(BOOL EN, BOOL *ENO, STRING IN, INT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (INT)IN.len ? L : (INT)IN.len; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body, L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body, L)); res.len = L; return res;} static inline STRING LEFT__STRING__STRING__DINT(BOOL EN, BOOL *ENO, STRING IN, DINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (DINT)IN.len ? L : (DINT)IN.len; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body, L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body, L)); res.len = L; return res;} static inline STRING LEFT__STRING__STRING__LINT(BOOL EN, BOOL *ENO, STRING IN, LINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (LINT)IN.len ? L : (LINT)IN.len; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body, L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body, L)); res.len = L; return res;} static inline STRING LEFT__STRING__STRING__USINT(BOOL EN, BOOL *ENO, STRING IN, USINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (USINT)IN.len ? L : (USINT)IN.len; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body, L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body, L)); res.len = L; return res;} static inline STRING LEFT__STRING__STRING__UINT(BOOL EN, BOOL *ENO, STRING IN, UINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (UINT)IN.len ? L : (UINT)IN.len; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body, L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body, L)); res.len = L; return res;} static inline STRING LEFT__STRING__STRING__UDINT(BOOL EN, BOOL *ENO, STRING IN, UDINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (UDINT)IN.len ? L : (UDINT)IN.len; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body, L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body, L)); res.len = L; return res;} static inline STRING LEFT__STRING__STRING__ULINT(BOOL EN, BOOL *ENO, STRING IN, ULINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (ULINT)IN.len ? L : (ULINT)IN.len; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body, L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body, L)); res.len = L; return res;}
# 1860 "iec_std_lib.h"
static inline STRING RIGHT__STRING__STRING__SINT(BOOL EN, BOOL *ENO, STRING IN, SINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (SINT)IN.len ? L : (SINT)IN.len; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body[(SINT)IN.len - L], L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body[(SINT)IN.len - L], L)); res.len = L; return res;} static inline STRING RIGHT__STRING__STRING__INT(BOOL EN, BOOL *ENO, STRING IN, INT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (INT)IN.len ? L : (INT)IN.len; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body[(INT)IN.len - L], L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body[(INT)IN.len - L], L)); res.len = L; return res;} static inline STRING RIGHT__STRING__STRING__DINT(BOOL EN, BOOL *ENO, STRING IN, DINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (DINT)IN.len ? L : (DINT)IN.len; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body[(DINT)IN.len - L], L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body[(DINT)IN.len - L], L)); res.len = L; return res;} static inline STRING RIGHT__STRING__STRING__LINT(BOOL EN, BOOL *ENO, STRING IN, LINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (LINT)IN.len ? L : (LINT)IN.len; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body[(LINT)IN.len - L], L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body[(LINT)IN.len - L], L)); res.len = L; return res;} static inline STRING RIGHT__STRING__STRING__USINT(BOOL EN, BOOL *ENO, STRING IN, USINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (USINT)IN.len ? L : (USINT)IN.len; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body[(USINT)IN.len - L], L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body[(USINT)IN.len - L], L)); res.len = L; return res;} static inline STRING RIGHT__STRING__STRING__UINT(BOOL EN, BOOL *ENO, STRING IN, UINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (UINT)IN.len ? L : (UINT)IN.len; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body[(UINT)IN.len - L], L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body[(UINT)IN.len - L], L)); res.len = L; return res;} static inline STRING RIGHT__STRING__STRING__UDINT(BOOL EN, BOOL *ENO, STRING IN, UDINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (UDINT)IN.len ? L : (UDINT)IN.len; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body[(UDINT)IN.len - L], L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body[(UDINT)IN.len - L], L)); res.len = L; return res;} static inline STRING RIGHT__STRING__STRING__ULINT(BOOL EN, BOOL *ENO, STRING IN, ULINT L){ STRING res; if (!EN || (L < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; L = L < (ULINT)IN.len ? L : (ULINT)IN.len; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body[(ULINT)IN.len - L], L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body[(ULINT)IN.len - L], L)); res.len = L; return res;}
# 1880 "iec_std_lib.h"
static inline STRING MID__STRING__STRING__SINT__SINT(BOOL EN, BOOL *ENO, STRING IN, SINT L, SINT P){ STRING res; if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; if(P <= (SINT)IN.len){ P -= 1; L = L + P <= (SINT)IN.len ? L : (SINT)IN.len - P; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body[P], L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body[P], L)); res.len = L; } return res;} static inline STRING MID__STRING__STRING__INT__INT(BOOL EN, BOOL *ENO, STRING IN, INT L, INT P){ STRING res; if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; if(P <= (INT)IN.len){ P -= 1; L = L + P <= (INT)IN.len ? L : (INT)IN.len - P; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body[P], L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body[P], L)); res.len = L; } return res;} static inline STRING MID__STRING__STRING__DINT__DINT(BOOL EN, BOOL *ENO, STRING IN, DINT L, DINT P){ STRING res; if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; if(P <= (DINT)IN.len){ P -= 1; L = L + P <= (DINT)IN.len ? L : (DINT)IN.len - P; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body[P], L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body[P], L)); res.len = L; } return res;} static inline STRING MID__STRING__STRING__LINT__LINT(BOOL EN, BOOL *ENO, STRING IN, LINT L, LINT P){ STRING res; if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; if(P <= (LINT)IN.len){ P -= 1; L = L + P <= (LINT)IN.len ? L : (LINT)IN.len - P; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body[P], L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body[P], L)); res.len = L; } return res;} static inline STRING MID__STRING__STRING__USINT__USINT(BOOL EN, BOOL *ENO, STRING IN, USINT L, USINT P){ STRING res; if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; if(P <= (USINT)IN.len){ P -= 1; L = L + P <= (USINT)IN.len ? L : (USINT)IN.len - P; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body[P], L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body[P], L)); res.len = L; } return res;} static inline STRING MID__STRING__STRING__UINT__UINT(BOOL EN, BOOL *ENO, STRING IN, UINT L, UINT P){ STRING res; if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; if(P <= (UINT)IN.len){ P -= 1; L = L + P <= (UINT)IN.len ? L : (UINT)IN.len - P; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body[P], L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body[P], L)); res.len = L; } return res;} static inline STRING MID__STRING__STRING__UDINT__UDINT(BOOL EN, BOOL *ENO, STRING IN, UDINT L, UDINT P){ STRING res; if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; if(P <= (UDINT)IN.len){ P -= 1; L = L + P <= (UDINT)IN.len ? L : (UDINT)IN.len - P; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body[P], L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body[P], L)); res.len = L; } return res;} static inline STRING MID__STRING__STRING__ULINT__ULINT(BOOL EN, BOOL *ENO, STRING IN, ULINT L, ULINT P){ STRING res; if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; res = (STRING){0,""}; if(P <= (ULINT)IN.len){ P -= 1; L = L + P <= (ULINT)IN.len ? L : (ULINT)IN.len - P; ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body[P], L, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body[P], L)); res.len = L; } return res;}






static inline STRING CONCAT(BOOL EN, BOOL *ENO, UINT param_count, ...){
  UINT i;
  STRING res;
  va_list ap;
  __strlen_t charcount;
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  charcount = 0;
  res = (STRING){0,""};

  __builtin_va_start(ap,param_count);

  for (i = 0; i < param_count && charcount < 126; i++)
  {
    STRING tmp = __builtin_va_arg(ap,STRING);
    __strlen_t charrem = 126 - charcount;
    __strlen_t to_write = tmp.len > charrem ? charrem : tmp.len;
    ((__builtin_object_size (&res.body[charcount], 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body[charcount], &tmp.body, to_write, __builtin_object_size (&res.body[charcount], 0)) : __inline_memcpy_chk (&res.body[charcount], &tmp.body, to_write));
    charcount += to_write;
  }

  res.len = charcount;

  __builtin_va_end(ap);
  return res;
}





static inline STRING __insert(STRING IN1, STRING IN2, __strlen_t P){
    STRING res;
    __strlen_t to_copy;
    res = (STRING){0,""};

    to_copy = P > IN1.len ? IN1.len : P;
    ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN1.body, to_copy, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN1.body, to_copy));
    P = res.len = to_copy;

    to_copy = IN2.len + res.len > 126 ? 126 - res.len : IN2.len;
    ((__builtin_object_size (&res.body[res.len], 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body[res.len], &IN2.body, to_copy, __builtin_object_size (&res.body[res.len], 0)) : __inline_memcpy_chk (&res.body[res.len], &IN2.body, to_copy));
    res.len += to_copy;

    to_copy = IN1.len - P < 126 - res.len ? IN1.len - P : 126 - res.len ;
    ((__builtin_object_size (&res.body[res.len], 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body[res.len], &IN1.body[P], to_copy, __builtin_object_size (&res.body[res.len], 0)) : __inline_memcpy_chk (&res.body[res.len], &IN1.body[P], to_copy));
    res.len += to_copy;

    return res;
}






static inline STRING INSERT__STRING__STRING__STRING__SINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, SINT P){ if (!EN || (P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__insert(str1,str2,P);} static inline STRING INSERT__STRING__STRING__STRING__INT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, INT P){ if (!EN || (P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__insert(str1,str2,P);} static inline STRING INSERT__STRING__STRING__STRING__DINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, DINT P){ if (!EN || (P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__insert(str1,str2,P);} static inline STRING INSERT__STRING__STRING__STRING__LINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, LINT P){ if (!EN || (P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__insert(str1,str2,P);} static inline STRING INSERT__STRING__STRING__STRING__USINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, USINT P){ if (!EN || (P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__insert(str1,str2,P);} static inline STRING INSERT__STRING__STRING__STRING__UINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, UINT P){ if (!EN || (P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__insert(str1,str2,P);} static inline STRING INSERT__STRING__STRING__STRING__UDINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, UDINT P){ if (!EN || (P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__insert(str1,str2,P);} static inline STRING INSERT__STRING__STRING__STRING__ULINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, ULINT P){ if (!EN || (P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__insert(str1,str2,P);}







static inline STRING __delete(STRING IN, __strlen_t L, __strlen_t P){
    STRING res;
    __strlen_t to_copy;
    res = (STRING){0,""};

    to_copy = P > IN.len ? IN.len : P-1;
    ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN.body, to_copy, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN.body, to_copy));
    P = res.len = to_copy;

    if( IN.len > P + L ){
        to_copy = IN.len - P - L;
        ((__builtin_object_size (&res.body[res.len], 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body[res.len], &IN.body[P + L], to_copy, __builtin_object_size (&res.body[res.len], 0)) : __inline_memcpy_chk (&res.body[res.len], &IN.body[P + L], to_copy));
        res.len += to_copy;
    }

    return res;
}






static inline STRING DELETE__STRING__STRING__SINT__SINT(BOOL EN, BOOL *ENO, STRING str, SINT L, SINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__delete(str,L,P);} static inline STRING DELETE__STRING__STRING__INT__INT(BOOL EN, BOOL *ENO, STRING str, INT L, INT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__delete(str,L,P);} static inline STRING DELETE__STRING__STRING__DINT__DINT(BOOL EN, BOOL *ENO, STRING str, DINT L, DINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__delete(str,L,P);} static inline STRING DELETE__STRING__STRING__LINT__LINT(BOOL EN, BOOL *ENO, STRING str, LINT L, LINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__delete(str,L,P);} static inline STRING DELETE__STRING__STRING__USINT__USINT(BOOL EN, BOOL *ENO, STRING str, USINT L, USINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__delete(str,L,P);} static inline STRING DELETE__STRING__STRING__UINT__UINT(BOOL EN, BOOL *ENO, STRING str, UINT L, UINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__delete(str,L,P);} static inline STRING DELETE__STRING__STRING__UDINT__UDINT(BOOL EN, BOOL *ENO, STRING str, UDINT L, UDINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__delete(str,L,P);} static inline STRING DELETE__STRING__STRING__ULINT__ULINT(BOOL EN, BOOL *ENO, STRING str, ULINT L, ULINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__delete(str,L,P);}







static inline STRING __replace(STRING IN1, STRING IN2, __strlen_t L, __strlen_t P){
    STRING res;
    __strlen_t to_copy;
    res = (STRING){0,""};

    to_copy = P > IN1.len ? IN1.len : P-1;
    ((__builtin_object_size (&res.body, 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body, &IN1.body, to_copy, __builtin_object_size (&res.body, 0)) : __inline_memcpy_chk (&res.body, &IN1.body, to_copy));
    P = res.len = to_copy;

    to_copy = IN2.len < L ? IN2.len : L;

    if( to_copy + res.len > 126 )
       to_copy = 126 - res.len;

    ((__builtin_object_size (&res.body[res.len], 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body[res.len], &IN2.body, to_copy, __builtin_object_size (&res.body[res.len], 0)) : __inline_memcpy_chk (&res.body[res.len], &IN2.body, to_copy));
    res.len += to_copy;

    P += L;
    if( res.len < 126 && P < IN1.len)
    {
        to_copy = IN1.len - P;
        ((__builtin_object_size (&res.body[res.len], 0) != (size_t) -1) ? __builtin___memcpy_chk (&res.body[res.len], &IN1.body[P], to_copy, __builtin_object_size (&res.body[res.len], 0)) : __inline_memcpy_chk (&res.body[res.len], &IN1.body[P], to_copy));
        res.len += to_copy;
    }

    return res;
}






static inline STRING REPLACE__STRING__STRING__STRING__SINT__SINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, SINT L, SINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__replace(str1,str2,L,P);} static inline STRING REPLACE__STRING__STRING__STRING__INT__INT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, INT L, INT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__replace(str1,str2,L,P);} static inline STRING REPLACE__STRING__STRING__STRING__DINT__DINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, DINT L, DINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__replace(str1,str2,L,P);} static inline STRING REPLACE__STRING__STRING__STRING__LINT__LINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, LINT L, LINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__replace(str1,str2,L,P);} static inline STRING REPLACE__STRING__STRING__STRING__USINT__USINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, USINT L, USINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__replace(str1,str2,L,P);} static inline STRING REPLACE__STRING__STRING__STRING__UINT__UINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, UINT L, UINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__replace(str1,str2,L,P);} static inline STRING REPLACE__STRING__STRING__STRING__UDINT__UDINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, UDINT L, UDINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__replace(str1,str2,L,P);} static inline STRING REPLACE__STRING__STRING__STRING__ULINT__ULINT(BOOL EN, BOOL *ENO, STRING str1, STRING str2, ULINT L, ULINT P){ if (!EN || (L < 0 || P < 0)) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (STRING){0,""}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (STRING)__replace(str1,str2,L,P);}






static inline __strlen_t __pfind(STRING* IN1, STRING* IN2){
    UINT count1 = 0;
    UINT count2 = 0;
    while(count1 + count2 < IN1->len && count2 < IN2->len)
    {
        if(IN1->body[count1 + count2] != IN2->body[count2]){
            count1 += count2 + 1;
            count2 = 0;
        }
        else {
            count2++;
        }
    }
    return count2 == IN2->len -1 ? 0 : count1 + 1;
}






static inline SINT FIND__SINT__STRING__STRING(BOOL EN, BOOL *ENO, STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (SINT)__pfind(&str1,&str2);} static inline INT FIND__INT__STRING__STRING(BOOL EN, BOOL *ENO, STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (INT)__pfind(&str1,&str2);} static inline DINT FIND__DINT__STRING__STRING(BOOL EN, BOOL *ENO, STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (DINT)__pfind(&str1,&str2);} static inline LINT FIND__LINT__STRING__STRING(BOOL EN, BOOL *ENO, STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (LINT)__pfind(&str1,&str2);} static inline USINT FIND__USINT__STRING__STRING(BOOL EN, BOOL *ENO, STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (USINT)__pfind(&str1,&str2);} static inline UINT FIND__UINT__STRING__STRING(BOOL EN, BOOL *ENO, STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UINT)__pfind(&str1,&str2);} static inline UDINT FIND__UDINT__STRING__STRING(BOOL EN, BOOL *ENO, STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (UDINT)__pfind(&str1,&str2);} static inline ULINT FIND__ULINT__STRING__STRING(BOOL EN, BOOL *ENO, STRING str1, STRING str2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return 0; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return (ULINT)__pfind(&str1,&str2);}
# 2058 "iec_std_lib.h"
static inline TIME ADD_TIME(BOOL EN, BOOL *ENO, TIME IN1, TIME IN2){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return __time_add(IN1, IN2);
}

static inline TOD ADD_TOD_TIME(BOOL EN, BOOL *ENO, TOD IN1, TIME IN2){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return __time_add(IN1, IN2);
}

static inline DT ADD_DT_TIME(BOOL EN, BOOL *ENO, DT IN1, TIME IN2){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return __time_add(IN1, IN2);
}

static inline TIME SUB_TIME(BOOL EN, BOOL *ENO, TIME IN1, TIME IN2){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return __time_sub(IN1, IN2);
}

static inline TIME SUB_DATE_DATE(BOOL EN, BOOL *ENO, DATE IN1, DATE IN2){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return __time_sub(IN1, IN2);
}

static inline TOD SUB_TOD_TIME(BOOL EN, BOOL *ENO, TOD IN1, TIME IN2){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TOD){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return __time_sub(IN1, IN2);
}

static inline TIME SUB_TOD_TOD(BOOL EN, BOOL *ENO, TOD IN1, TOD IN2){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return __time_sub(IN1, IN2);
}

static inline DT SUB_DT_TIME(BOOL EN, BOOL *ENO, DT IN1, TIME IN2){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return __time_sub(IN1, IN2);
}

static inline TIME SUB_DT_DT(BOOL EN, BOOL *ENO, DT IN1, DT IN2){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return __time_sub(IN1, IN2);
}
# 2110 "iec_std_lib.h"
static inline TIME MULTIME__TIME__TIME__REAL(BOOL EN, BOOL *ENO, TIME IN1, REAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, IN2);} static inline TIME MULTIME__TIME__TIME__LREAL(BOOL EN, BOOL *ENO, TIME IN1, LREAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, IN2);} static inline TIME MULTIME__TIME__TIME__SINT(BOOL EN, BOOL *ENO, TIME IN1, SINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, IN2);} static inline TIME MULTIME__TIME__TIME__INT(BOOL EN, BOOL *ENO, TIME IN1, INT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, IN2);} static inline TIME MULTIME__TIME__TIME__DINT(BOOL EN, BOOL *ENO, TIME IN1, DINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, IN2);} static inline TIME MULTIME__TIME__TIME__LINT(BOOL EN, BOOL *ENO, TIME IN1, LINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, IN2);} static inline TIME MULTIME__TIME__TIME__USINT(BOOL EN, BOOL *ENO, TIME IN1, USINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, IN2);} static inline TIME MULTIME__TIME__TIME__UINT(BOOL EN, BOOL *ENO, TIME IN1, UINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, IN2);} static inline TIME MULTIME__TIME__TIME__UDINT(BOOL EN, BOOL *ENO, TIME IN1, UDINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, IN2);} static inline TIME MULTIME__TIME__TIME__ULINT(BOOL EN, BOOL *ENO, TIME IN1, ULINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, IN2);}
# 2119 "iec_std_lib.h"
static inline TIME MUL__TIME__TIME__REAL(BOOL EN, BOOL *ENO, TIME IN1, REAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, IN2);} static inline TIME MUL__TIME__TIME__LREAL(BOOL EN, BOOL *ENO, TIME IN1, LREAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, IN2);} static inline TIME MUL__TIME__TIME__SINT(BOOL EN, BOOL *ENO, TIME IN1, SINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, IN2);} static inline TIME MUL__TIME__TIME__INT(BOOL EN, BOOL *ENO, TIME IN1, INT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, IN2);} static inline TIME MUL__TIME__TIME__DINT(BOOL EN, BOOL *ENO, TIME IN1, DINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, IN2);} static inline TIME MUL__TIME__TIME__LINT(BOOL EN, BOOL *ENO, TIME IN1, LINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, IN2);} static inline TIME MUL__TIME__TIME__USINT(BOOL EN, BOOL *ENO, TIME IN1, USINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, IN2);} static inline TIME MUL__TIME__TIME__UINT(BOOL EN, BOOL *ENO, TIME IN1, UINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, IN2);} static inline TIME MUL__TIME__TIME__UDINT(BOOL EN, BOOL *ENO, TIME IN1, UDINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, IN2);} static inline TIME MUL__TIME__TIME__ULINT(BOOL EN, BOOL *ENO, TIME IN1, ULINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_mul(IN1, IN2);}
# 2128 "iec_std_lib.h"
static inline TIME DIVTIME__TIME__TIME__REAL(BOOL EN, BOOL *ENO, TIME IN1, REAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, IN2);} static inline TIME DIVTIME__TIME__TIME__LREAL(BOOL EN, BOOL *ENO, TIME IN1, LREAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, IN2);} static inline TIME DIVTIME__TIME__TIME__SINT(BOOL EN, BOOL *ENO, TIME IN1, SINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, IN2);} static inline TIME DIVTIME__TIME__TIME__INT(BOOL EN, BOOL *ENO, TIME IN1, INT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, IN2);} static inline TIME DIVTIME__TIME__TIME__DINT(BOOL EN, BOOL *ENO, TIME IN1, DINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, IN2);} static inline TIME DIVTIME__TIME__TIME__LINT(BOOL EN, BOOL *ENO, TIME IN1, LINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, IN2);} static inline TIME DIVTIME__TIME__TIME__USINT(BOOL EN, BOOL *ENO, TIME IN1, USINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, IN2);} static inline TIME DIVTIME__TIME__TIME__UINT(BOOL EN, BOOL *ENO, TIME IN1, UINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, IN2);} static inline TIME DIVTIME__TIME__TIME__UDINT(BOOL EN, BOOL *ENO, TIME IN1, UDINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, IN2);} static inline TIME DIVTIME__TIME__TIME__ULINT(BOOL EN, BOOL *ENO, TIME IN1, ULINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, IN2);}
# 2137 "iec_std_lib.h"
static inline TIME DIV__TIME__TIME__REAL(BOOL EN, BOOL *ENO, TIME IN1, REAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, IN2);} static inline TIME DIV__TIME__TIME__LREAL(BOOL EN, BOOL *ENO, TIME IN1, LREAL IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, IN2);} static inline TIME DIV__TIME__TIME__SINT(BOOL EN, BOOL *ENO, TIME IN1, SINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, IN2);} static inline TIME DIV__TIME__TIME__INT(BOOL EN, BOOL *ENO, TIME IN1, INT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, IN2);} static inline TIME DIV__TIME__TIME__DINT(BOOL EN, BOOL *ENO, TIME IN1, DINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, IN2);} static inline TIME DIV__TIME__TIME__LINT(BOOL EN, BOOL *ENO, TIME IN1, LINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, IN2);} static inline TIME DIV__TIME__TIME__USINT(BOOL EN, BOOL *ENO, TIME IN1, USINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, IN2);} static inline TIME DIV__TIME__TIME__UINT(BOOL EN, BOOL *ENO, TIME IN1, UINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, IN2);} static inline TIME DIV__TIME__TIME__UDINT(BOOL EN, BOOL *ENO, TIME IN1, UDINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, IN2);} static inline TIME DIV__TIME__TIME__ULINT(BOOL EN, BOOL *ENO, TIME IN1, ULINT IN2){ if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (TIME){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1; return __time_div(IN1, IN2);}



static inline DT CONCAT_DATE_TOD(BOOL EN, BOOL *ENO, DATE IN1, TOD IN2){
  if (!EN) { if (ENO != ((void *)0)) *ENO = (BOOL)0; return (DT){0,0}; } else if (ENO != ((void *)0)) *ENO = (BOOL)1;
  return __time_add(IN1, IN2);
}
