/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.actility.m2m.storage.driver.sqlite.jni.impl;

public class sqlitedriver implements sqlitedriverConstants {
  public static SqliteDB SqliteOpen(String fname) {
    long cPtr = sqlitedriverJNI.SqliteOpen(fname);
    return (cPtr == 0) ? null : new SqliteDB(cPtr, false);
  }

  public static void SqliteClose(SqliteDB arg0) {
    sqlitedriverJNI.SqliteClose(SqliteDB.getCPtr(arg0), arg0);
  }

  public static int activate(SqliteDB obj) {
    return sqlitedriverJNI.activate(SqliteDB.getCPtr(obj), obj);
  }

  public static int deactivate(SqliteDB obj) {
    return sqlitedriverJNI.deactivate(SqliteDB.getCPtr(obj), obj);
  }

  public static int checkDBVersion(SqliteDB obj, int major, int minor) {
    return sqlitedriverJNI.checkDBVersion(SqliteDB.getCPtr(obj), obj, major, minor);
  }

  public static void setLogLevel(int level, SqliteDB obj) {
    sqlitedriverJNI.setLogLevel(level, SqliteDB.getCPtr(obj), obj);
  }

  public static byte[] sqliteRetrieve(SqliteDB obj, String fullPath) {
  return sqlitedriverJNI.sqliteRetrieve(SqliteDB.getCPtr(obj), obj, fullPath);
}

  public static int sqliteCreate(SqliteDB obj, String fullPath, byte[] content, int len, SWIGTYPE_p_p_InternalAttribute attrs, int attrs_len) {
    return sqlitedriverJNI.sqliteCreate(SqliteDB.getCPtr(obj), obj, fullPath, content, len, SWIGTYPE_p_p_InternalAttribute.getCPtr(attrs), attrs_len);
  }

  public static int sqliteUpdate(SqliteDB obj, String fullPath, byte[] content, int len, SWIGTYPE_p_p_InternalAttribute attrs, int attrs_len) {
    return sqlitedriverJNI.sqliteUpdate(SqliteDB.getCPtr(obj), obj, fullPath, content, len, SWIGTYPE_p_p_InternalAttribute.getCPtr(attrs), attrs_len);
  }

  public static int sqliteDelete(SqliteDB obj, String fullPath, int cascadeLevel) {
    return sqlitedriverJNI.sqliteDelete(SqliteDB.getCPtr(obj), obj, fullPath, cascadeLevel);
  }

  public static void freeInternalAttributeArray(SWIGTYPE_p_p_InternalAttribute data, int length) {
    sqlitedriverJNI.freeInternalAttributeArray(SWIGTYPE_p_p_InternalAttribute.getCPtr(data), length);
  }

  public static SearchReturn search(SqliteDB obj, String basePath, int scope, InternalCondition condition, int order, int limit) {
    long cPtr = sqlitedriverJNI.search(SqliteDB.getCPtr(obj), obj, basePath, scope, InternalCondition.getCPtr(condition), condition, order, limit);
    return (cPtr == 0) ? null : new SearchReturn(cPtr, true);
  }

  public static int beginTransaction(SqliteDB obj) {
    return sqlitedriverJNI.beginTransaction(SqliteDB.getCPtr(obj), obj);
  }

  public static int commitTransaction(SqliteDB obj) {
    return sqlitedriverJNI.commitTransaction(SqliteDB.getCPtr(obj), obj);
  }

  public static int rollbackTransaction(SqliteDB obj) {
    return sqlitedriverJNI.rollbackTransaction(SqliteDB.getCPtr(obj), obj);
  }

  public static int executeSqlStatementWithOutParameters(SqliteDB obj, String sql) {
    return sqlitedriverJNI.executeSqlStatementWithOutParameters(SqliteDB.getCPtr(obj), obj, sql);
  }

  public static int setMaxDatabaseSizeKb(SqliteDB obj, int maxDatabaseSizeKb) {
    return sqlitedriverJNI.setMaxDatabaseSizeKb(SqliteDB.getCPtr(obj), obj, maxDatabaseSizeKb);
  }

  public static void setMinDurationBetweenVacuums(int value) {
    sqlitedriverJNI.setMinDurationBetweenVacuums(value);
  }

  public static void setMaxOpsBeforeVacuum(int value) {
    sqlitedriverJNI.setMaxOpsBeforeVacuum(value);
  }

  public static void setMaxDurationBeforeVacuum(int value) {
    sqlitedriverJNI.setMaxDurationBeforeVacuum(value);
  }

  public static void setMaxDBUsagePourcentageBeforeVacuum(int value) {
    sqlitedriverJNI.setMaxDBUsagePourcentageBeforeVacuum(value);
  }

  public static void setMinDurationBetweenDBUsageComputation(int value) {
    sqlitedriverJNI.setMinDurationBetweenDBUsageComputation(value);
  }

  public static SWIGTYPE_p_p_subSearchResult new_searchArray(int nelements) {
    long cPtr = sqlitedriverJNI.new_searchArray(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_subSearchResult(cPtr, false);
  }

  public static void delete_searchArray(SWIGTYPE_p_p_subSearchResult ary) {
    sqlitedriverJNI.delete_searchArray(SWIGTYPE_p_p_subSearchResult.getCPtr(ary));
  }

  public static subSearchResult searchArray_getitem(SWIGTYPE_p_p_subSearchResult ary, int index) {
    long cPtr = sqlitedriverJNI.searchArray_getitem(SWIGTYPE_p_p_subSearchResult.getCPtr(ary), index);
    return (cPtr == 0) ? null : new subSearchResult(cPtr, false);
  }

  public static void searchArray_setitem(SWIGTYPE_p_p_subSearchResult ary, int index, subSearchResult value) {
    sqlitedriverJNI.searchArray_setitem(SWIGTYPE_p_p_subSearchResult.getCPtr(ary), index, subSearchResult.getCPtr(value), value);
  }

  public static SWIGTYPE_p_p_InternalAttribute new_attributeArray(int nelements) {
    long cPtr = sqlitedriverJNI.new_attributeArray(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_InternalAttribute(cPtr, false);
  }

  public static void delete_attributeArray(SWIGTYPE_p_p_InternalAttribute ary) {
    sqlitedriverJNI.delete_attributeArray(SWIGTYPE_p_p_InternalAttribute.getCPtr(ary));
  }

  public static InternalAttribute attributeArray_getitem(SWIGTYPE_p_p_InternalAttribute ary, int index) {
    long cPtr = sqlitedriverJNI.attributeArray_getitem(SWIGTYPE_p_p_InternalAttribute.getCPtr(ary), index);
    return (cPtr == 0) ? null : new InternalAttribute(cPtr, false);
  }

  public static void attributeArray_setitem(SWIGTYPE_p_p_InternalAttribute ary, int index, InternalAttribute value) {
    sqlitedriverJNI.attributeArray_setitem(SWIGTYPE_p_p_InternalAttribute.getCPtr(ary), index, InternalAttribute.getCPtr(value), value);
  }

}
