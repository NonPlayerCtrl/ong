From e98f634c2648349b60759430c189a1197d52176d Mon Sep 17 00:00:00 2001
From: jreich_dev <jreich@CentOS-dev-jreich.actility.net>
Date: Fri, 5 Oct 2012 09:47:04 +0200
Subject: [PATCH 1/3] usr2 thread dump

---
 .../cdc/src/linux/javavm/runtime/sync_md.c         |   31 ++++++++++++++++++++
 1 files changed, 31 insertions(+), 0 deletions(-)

diff --git a/phoneme_advanced_mr2_b167/cdc/src/linux/javavm/runtime/sync_md.c b/phoneme_advanced_mr2_b167/cdc/src/linux/javavm/runtime/sync_md.c
index 59ffc6c..7d88e71 100644
--- a/phoneme_advanced_mr2_b167/cdc/src/linux/javavm/runtime/sync_md.c
+++ b/phoneme_advanced_mr2_b167/cdc/src/linux/javavm/runtime/sync_md.c
@@ -37,6 +37,7 @@
 #include <stdio.h>
 #include <sys/types.h>
 #include <sys/wait.h>
+#include "javavm/include/interpreter.h"
 #ifdef CVM_JVMPI
 #include "javavm/include/globals.h"
 #endif
@@ -48,6 +49,35 @@
 #include "javavm/include/porting/jit/jit.h"
 #endif
 
+/* Warning: This thread dumper is only for the use of debugging code.
+   There's a risk that it can potentially crash the VM if invoked at
+   the wrong time.  Hence, this is not to be incorporated into a
+   production build.  It is only for assisting in debugging efforts
+   when needed.
+*/
+static void threadDumpHandler(int sig)
+{
+    CVMExecEnv *ee = CVMgetEE();
+    CVMBool success;
+    int threadCount = 1;
+
+    success = CVMsysMutexTryLock(ee, &CVMglobals.threadLock);
+    if (!success) {
+       return;
+    }
+
+    CVMconsolePrintf("\nStart thread dump:\n");
+    CVMconsolePrintf("======================================\n");
+    CVM_WALK_ALL_THREADS(ee, threadEE, {
+       CVMconsolePrintf("Thread %d: ee 0x%x", threadCount, threadEE);
+       CVMdumpStack(&threadEE->interpreterStack,0,0,0);
+       CVMconsolePrintf("======================================\n");
+       threadCount++;
+    });
+    CVMconsolePrintf("End thread dump\n\n");
+    CVMsysMutexUnlock(ee, &CVMglobals.threadLock);
+}
+
 /*
  * signal handler for CVMthreadSuspend() and CVMthreadResume() request.
  */
@@ -540,6 +570,7 @@ linuxSyncInit(void)
             {SIGQUIT, sigquitHandler, SA_RESTART},
 #endif
 	    {SIGUSR1, handleSuspendResume, SA_RESTART},
+        {SIGUSR2, threadDumpHandler, SA_RESTART},
 	    {SIGBUS, crash, 0},
 	    {SIGILL, crash, 0},
 	    {SIGFPE, crash, 0}
-- 
1.7.3.4

